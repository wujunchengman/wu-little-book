import{_ as s,c as a,a as t,o as e}from"./app-Bah7_sEf.js";const p={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h2 id="简述jwt" tabindex="-1"><a class="header-anchor" href="#简述jwt"><span>简述Jwt</span></a></h2><p>Jwt全称是jwt的全称是json web token，它的作用是用户授权authorization，而不是用户的身份认证authentication，但是不是说Jwt与身份认证无关</p><p>身份认证是判断携带的Token信息是否合法，并解析为对应的身份信息。</p><p>在Asp.Net Core中，身份认证和授权的概念进行了解耦，以此更好的支持多种认证方式</p><p>无论是使用Cookie还是Jwt都要使用身份认证中间件去处理，然后解析为抽象好的的身份信息对象，再由授权中间件对访问的资源进行鉴权</p><p>前面提到的Jwt的主要作用是用户授权，是指Jwt中可以携带用户的权限信息，在这个映射过程中无需再从数据库中获取权限信息，然而实际上，用户的权限可能会很复杂，如果全部写入到Jwt中，会导致Jwt异常庞大，因此在服务器程序中，通常Jwt的payload只包含用户ID，使用方式与传统的session一样，还是从数据库中请求用户信息与权限信息。Jwt的优势更多时候是在客户端使用，例如：服务端下发一个Jwt Token，包含了所能使用的完整权限信息，客户端可以直接解析对应的权限，而无需频繁与服务器通信校验权限，可以节省大量的服务器资源</p><h2 id="在asp-net-core中使用jwt" tabindex="-1"><a class="header-anchor" href="#在asp-net-core中使用jwt"><span>在Asp.Net Core中使用Jwt</span></a></h2><p>微软提供了使用Jwt的身份认证方案，无需自己实现，只需要安装对应的包配置即可</p><p>安装nuget包</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">dotnet <span class="token function">add</span> package Microsoft.AspNetCore.Authentication.JwtBearer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在Program.cs中配置身份认证模式为使用Jwt身份认证</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>DefaultScheme <span class="token operator">=</span> JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    o<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TokenValidationParameters</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        ValidateAudience <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        ValidateIssuer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        ValidateLifetime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        ClockSkew <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        RequireExpirationTime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">&quot;Authentication:SecretKey&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        ValidIssuer <span class="token operator">=</span> builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">&quot;Authentication:Issuer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        ValidAudience <span class="token operator">=</span> builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">&quot;Authentication:Audience&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Asp.Net Core会将Jwt中的信息解析到HttpContext.User中，Asp.Net Core将会根据HttpContext.User中包含的信息进行授权验证</p><p>需要注意的是，一定要注册身份认证中间件，否则不会去解析Jwt，进而导致HttpContext.User没有信息，授权验证不通过</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// 身份验证中间件</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 授权中间件</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="签发jwt" tabindex="-1"><a class="header-anchor" href="#签发jwt"><span>签发Jwt</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Claim<span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtRegisteredClaimNames<span class="token punctuation">.</span>Aud<span class="token punctuation">,</span>configuration<span class="token punctuation">[</span><span class="token string">&quot;Authentication:Audience&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtRegisteredClaimNames<span class="token punctuation">.</span>Iss<span class="token punctuation">,</span>configuration<span class="token punctuation">[</span><span class="token string">&quot;Authentication:Issuer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;UserName&quot;</span><span class="token punctuation">,</span> account<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;CorpId&quot;</span><span class="token punctuation">,</span> account<span class="token punctuation">.</span>CorpID<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 过期时间</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> expire <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddHours</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>longActing<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    expire <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 密钥</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> key <span class="token operator">=</span> configuration<span class="token punctuation">[</span><span class="token string">&quot;Authentication:SecretKey&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> secBytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> secKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>secBytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SigningCredentials</span><span class="token punctuation">(</span>secKey<span class="token punctuation">,</span> SecurityAlgorithms<span class="token punctuation">.</span>HmacSha256<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> tokenDescriptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtSecurityToken</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">claims</span><span class="token punctuation">:</span> claims<span class="token punctuation">,</span> <span class="token named-parameter punctuation">expires</span><span class="token punctuation">:</span> expire<span class="token punctuation">,</span> <span class="token named-parameter punctuation">signingCredentials</span><span class="token punctuation">:</span> credentials<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 最终的jwt</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> jwt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtSecurityTokenHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteToken</span><span class="token punctuation">(</span>tokenDescriptor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="携带jwt" tabindex="-1"><a class="header-anchor" href="#携带jwt"><span>携带Jwt</span></a></h2><p>默认情况下，Asp.Net Core从Header中获取Jwt，添加授权后，需要在Header中携带<code>Authorization</code>，其值为<code>Bearer </code>加上对应Jwt，需要注意的是，这中间有个空格，不要忘了</p><h2 id="_401错误与403错误" tabindex="-1"><a class="header-anchor" href="#_401错误与403错误"><span>401错误与403错误</span></a></h2><p>刚开始用Jwt的时候，可能会出现401错误，这是身份验证除了问题，这时候可以看看响应头，Asp.Net Core会将错误信息输出的响应头的Authentication中，其中包含了大致的错误信息</p><p>403错误是授权错误，意味着Jwt解析之后的HttpContext.User中得到的权限信息不匹配，这代表这Jwt已经跑通了，只是分发Jwt时携带的权限出了问题</p>`,22)]))}const l=s(p,[["render",c]]),u=JSON.parse('{"path":"/AspNetCore/Authorization/JwtAuthenticationScheme.html","title":"Jwt的身份认证","lang":"zh-CN","frontmatter":{"title":"Jwt的身份认证"},"headers":[{"level":2,"title":"简述Jwt","slug":"简述jwt","link":"#简述jwt","children":[]},{"level":2,"title":"在Asp.Net Core中使用Jwt","slug":"在asp-net-core中使用jwt","link":"#在asp-net-core中使用jwt","children":[]},{"level":2,"title":"签发Jwt","slug":"签发jwt","link":"#签发jwt","children":[]},{"level":2,"title":"携带Jwt","slug":"携带jwt","link":"#携带jwt","children":[]},{"level":2,"title":"401错误与403错误","slug":"_401错误与403错误","link":"#_401错误与403错误","children":[]}],"git":{"updatedTime":1696922216000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"AspNetCore/Authorization/JwtAuthenticationScheme.md"}');export{l as comp,u as data};
