import{_ as n,c as a,a as e,o as p}from"./app-Bah7_sEf.js";const l={};function t(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="创建model和viewmodel" tabindex="-1"><a class="header-anchor" href="#创建model和viewmodel"><span>创建Model和ViewModel</span></a></h1><p>通过上面编写的TodoListView控件，已经有了一个基本的视图，但是当面对实际情况时，从数据库或者类似数据库的外部获取数据，传统的方式是在视图的构造函数中加载数据，然后生成对应的组件，但是这样有一些缺点</p><ul><li>不能使用XAML（视图中的组件直接由代码构建，而不是通过XAML进行解析）</li><li>我们必须编写代码来响应数据的变化并更新显示</li><li>不可单元测试</li></ul><p>这些注意事项对于小型应用程序似乎并不重要，但随着应用程序的增长，它们会成为越来越大的问题：尤其是可测试性部分（无法保证通过代码构建的样式、组件嵌套是正确的）。更好的方式是使用MVVM模式</p><h2 id="创建model" tabindex="-1"><a class="header-anchor" href="#创建model"><span>创建Model</span></a></h2><p>首先创建一个Model来表示数据（创建在Models文件中），就像在数据库中一样，这个Model包含两个属性：文本描述和是否被选中</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">namespace</span> <span class="token namespace">Todo<span class="token punctuation">.</span>Models</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodoItem</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsChecked <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来创建一个Database服务，模拟从数据库中获取数据</p><p>在Todo项目创建Services文件夹，然后创建Database.cs类文件</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">Todo<span class="token punctuation">.</span>Models</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token namespace">Todo<span class="token punctuation">.</span>Services</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Database</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TodoItem<span class="token punctuation">&gt;</span></span> <span class="token function">GetItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TodoItem</span> <span class="token punctuation">{</span> Description <span class="token operator">=</span> <span class="token string">&quot;Walk the dog&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TodoItem</span> <span class="token punctuation">{</span> Description <span class="token operator">=</span> <span class="token string">&quot;Buy some milk&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TodoItem</span> <span class="token punctuation">{</span> Description <span class="token operator">=</span> <span class="token string">&quot;Learn Avalonia&quot;</span><span class="token punctuation">,</span> IsChecked <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建viewmodel" tabindex="-1"><a class="header-anchor" href="#创建viewmodel"><span>创建ViewModel</span></a></h2><p>现在需要一个表示列表的视图模型，这是为视图提供数据的类</p><p>前面创建了TodoListView视图，因此关联的视图模型将被命名为TodoListViewModel，并将TodoListViewModel放在项目的ViewModels目录中</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>ObjectModel</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">Todo<span class="token punctuation">.</span>Models</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token namespace">Todo<span class="token punctuation">.</span>ViewModels</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodoListViewModel</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ViewModelBase</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token function">TodoListViewModel</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TodoItem<span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObservableCollection<span class="token punctuation">&lt;</span>TodoItem<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name">ObservableCollection<span class="token punctuation">&lt;</span>TodoItem<span class="token punctuation">&gt;</span></span> Items <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图模型在这个阶段非常简单，它只是在其构造函数中获取TodoItem模型的集合，并将它们放入ObservableCollection集合的Items属性中。</p><p>需要注意的是，父类ViewModelBase非常重要，后面会讲到它的作用</p><p>接下来修改MainWindowViewModel</p>`,17)]))}const i=n(l,[["render",t]]),u=JSON.parse('{"path":"/Avalonia/Todo/CreatedModelAndViewModel.html","title":"创建Model和ViewModel","lang":"zh-CN","frontmatter":{"title":"创建Model和ViewModel"},"headers":[{"level":2,"title":"创建Model","slug":"创建model","link":"#创建model","children":[]},{"level":2,"title":"创建ViewModel","slug":"创建viewmodel","link":"#创建viewmodel","children":[]}],"git":{"updatedTime":1669714394000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Avalonia/Todo/CreatedModelAndViewModel.md"}');export{i as comp,u as data};
