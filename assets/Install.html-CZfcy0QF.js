import{_ as s,c as a,a as e,o as p}from"./app-Bah7_sEf.js";const l={};function t(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 id="安装nlog" tabindex="-1"><a class="header-anchor" href="#安装nlog"><span>安装Nlog</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">dotnet <span class="token function">add</span> package NLog</span>
<span class="line">dotnet <span class="token function">add</span> package NLog.Web.AspNetCore</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="启用nlog" tabindex="-1"><a class="header-anchor" href="#启用nlog"><span>启用Nlog</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token namespace">NLog</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">NLog<span class="token punctuation">.</span>Web</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Early init of NLog to allow startup and exception logging, before host is built</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> logger <span class="token operator">=</span> NLog<span class="token punctuation">.</span>LogManager<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">LoadConfigurationFromAppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetCurrentClassLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;init main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* </span>
<span class="line">    * 原本的builder的内容 </span>
<span class="line">    * 主要是注入各种依赖服务的代码</span>
<span class="line">    */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 清理自带的日志记录器提供程序</span></span>
<span class="line">    builder<span class="token punctuation">.</span>Logging<span class="token punctuation">.</span><span class="token function">ClearProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 使用Nlog作为日志记录器</span></span>
<span class="line">    builder<span class="token punctuation">.</span>Host<span class="token punctuation">.</span><span class="token function">UseNLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 原本的app管道配置部分不变 */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// NLog: catch setup errors</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>exception<span class="token punctuation">,</span> <span class="token string">&quot;Stopped program because of exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">throw</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">finally</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux)</span></span>
<span class="line">    NLog<span class="token punctuation">.</span>LogManager<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编写nlog配置文件" tabindex="-1"><a class="header-anchor" href="#编写nlog配置文件"><span>编写Nlog配置文件</span></a></h2>`,5)]))}const o=s(l,[["render",t]]),u=JSON.parse('{"path":"/Ecosystem/NLog/Install.html","title":"Asp.netCore中安装启用Nlog","lang":"zh-CN","frontmatter":{"title":"Asp.netCore中安装启用Nlog"},"headers":[{"level":2,"title":"安装Nlog","slug":"安装nlog","link":"#安装nlog","children":[]},{"level":2,"title":"启用Nlog","slug":"启用nlog","link":"#启用nlog","children":[]},{"level":2,"title":"编写Nlog配置文件","slug":"编写nlog配置文件","link":"#编写nlog配置文件","children":[]}],"git":{"updatedTime":1696922216000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Ecosystem/NLog/Install.md"}');export{o as comp,u as data};
