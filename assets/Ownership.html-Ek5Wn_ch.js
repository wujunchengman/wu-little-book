import{_ as s,c as a,a as p,o as e}from"./app-Bah7_sEf.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="所有权" tabindex="-1"><a class="header-anchor" href="#所有权"><span>所有权</span></a></h1><p>所有权是Rust中一个重要概念，在其它编程语言中并不常见，所有权让Rust无需垃圾回收（GC）也能保证内存安全</p><p>所有权的主要目的是管理堆数据</p><p>所有权规则：</p><ol><li>Rust 中的每一个值都有一个 所有者（owner）。</li><li>值在任一时刻有且只有一个所有者。</li><li>当所有者（变量）离开作用域，这个值将被丢弃。</li></ol><h2 id="堆上的数据怎么释放" tabindex="-1"><a class="header-anchor" href="#堆上的数据怎么释放"><span>堆上的数据怎么释放？</span></a></h2><p>栈上的数据处理是简单的，将值复制一份，然后在变量的生命周期结束后释放掉就好了</p><p>但是堆上的数据就不是那么简单了，大多数编程语言使用堆上的数据都遵循这样一种结构：先在栈上保存这个变量对应的数据在堆上的指针（根据不同的类型还有其他的参数），然后通过这个指针去寻找到堆上的数据，Rust也使用了这种模式</p><h4 id="变量与数据交互的方式-一-移动" tabindex="-1"><a class="header-anchor" href="#变量与数据交互的方式-一-移动"><span>变量与数据交互的方式（一）：移动</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 会抛异常，在 let s2 = s1; 之后，Rust 认为 s1 不再有效</span></span>
<span class="line"><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{s1}, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Rust中，声明了s2后，s1就无效了。有GC的语言中，在声明<code>s2 = s1</code>后，s2和s1都指向了相同的堆内存地址，当s1和s2变量的生命周期都结束后，由GC去释放所引用的堆内存；C/C++则是由手动free，这样很容易遗漏，或者重复释放。Rust的特点就是无GC又不需要手动释放，于是选择了通过所有的权的概念，去自动free</p><p>一想到要自动free，那么最好的时机就是在变量的生命周期结束的时候去free，如果这个堆中的内存对象只有一个引用就很简单了，但是向上文这样声明了<code>s2 = s1</code>的时候，情况就复杂起来了，当s1生命周期结束需不需要free堆内存？当s2生命周期结束需不需要free堆内存？Rust给的答案是，最后声明引用的变量生命周期结束后free堆内存。解决了这个问题后又出现了新的问题，最后声明引用的变量生命周期不一定比先声明的变量生命周期长，于是Rust规定当使用一个新变量引用旧变量后，旧变量就失效。这么约定的原因是Rust认为如果你要在一个长生命周期内使用一个短生命周期的变量去引用它，不如直接使用这个长生命周期的变量</p><h4 id="变量与数据交互的方式-二-克隆" tabindex="-1"><a class="header-anchor" href="#变量与数据交互的方式-二-克隆"><span>变量与数据交互的方式（二）：克隆</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 正常输出</span></span>
<span class="line"><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;s1 = {s1}, s2 = {s2}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果程序中s1和s2都需要使用呢？可以显示使用clone方法，需要注意的是，这时候s2和s1并非引用同一个堆内存地址，而是将s1的堆内存地址复制了一份，也就是常说的“深拷贝”</p><h2 id="函数调用对生命周期的影响" tabindex="-1"><a class="header-anchor" href="#函数调用对生命周期的影响"><span>函数调用对生命周期的影响</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// s 进入作用域</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">takes_ownership</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// s 的值移动到函数里 ...</span></span>
<span class="line">                                    <span class="token comment">// ... 所以到这里不再有效</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                      <span class="token comment">// x 进入作用域</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">makes_copy</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// x 应该移动函数里，</span></span>
<span class="line">                                    <span class="token comment">// 但 i32 是 Copy 的，</span></span>
<span class="line">                                    <span class="token comment">// 所以在后面可继续使用 x</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// 这里，x 先移出了作用域，然后是 s。但因为 s 的值已被移走，</span></span>
<span class="line">  <span class="token comment">// 没有特殊之处</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">takes_ownership</span><span class="token punctuation">(</span>some_string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// some_string 进入作用域</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> some_string<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// 这里，some_string 移出作用域并调用 \`drop\` 方法。</span></span>
<span class="line">  <span class="token comment">// 占用的内存被释放</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">makes_copy</span><span class="token punctuation">(</span>some_integer<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// some_integer 进入作用域</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> some_integer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// 这里，some_integer 移出作用域。没有特殊之处</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面谈到了移动和克隆，这都是针对堆上的数据，那么栈上的数据呢？Rust和其他编程语言一样，基本数据类型在栈上(也有在栈上的自定义类型)，当传递在栈上的变量时，会自动传递clone后的变量。</p><p>如果有C#或者Java之类编程语言的经验，那么可以简单的看，如果在C#或者Java的函数中修改形参的值，会一同修改到实参的值，那么在Rust中，就会发生移动，也就是引用类型(C#中的引用类型和值类型的概念)会触发移动，触发移动后原来的变量就失效了</p><p>除了传递给函数参数会触发移动，将值从函数中返回也会触发移动，如果没有变量接收返回值，那么就结束生命周期free掉堆上的内存，如果有变量接收，那么就移交所有权给新的变量</p><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用"><span>引用</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>s2<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The length of &#39;{}&#39; is {}.&quot;</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">calculate_length</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// len() 返回字符串的长度</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">(</span>s<span class="token punctuation">,</span> length<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还是从一段代码来看，上面讲到了通过参数会触发移动，那么想要一个变量在调用函数后依然可用，那就只有通过返回值触发移动将所有权再移交回来，但是这样就显得很呆。</p><p>为了解决这个很呆的用法，Rust提出了引用的概念</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The length of &#39;{s1}&#39; is {len}.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">calculate_length</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span></span>
<span class="line">    s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里<code>calculate_length</code>的参数类型从<code>String</code>变为了<code>&amp;String</code>，这时候<code>calculate_length</code>所需要的类型变成了<code>String</code>类型的引用，而在调用这个函数传递参数时，也添加了<code>&amp;</code>符号<code>let len = calculate_length(&amp;s1);</code></p><p>当传递一个变量的引用时，并不会发生所有权的改变，因为所有权没有发生改变，所以<code>calculate_length</code>函数并不能修改对应值，Rust中的修改必须要有所有权</p><p>创建一个引用的行为叫做借用，借用是一个行为上的名称</p><ul><li>在任意给定时间，要么 只能有一个可变引用，要么 只能有多个不可变引用。</li><li>引用必须总是有效的。</li></ul><h2 id="slice" tabindex="-1"><a class="header-anchor" href="#slice"><span>Slice</span></a></h2><p>slice 允许你引用集合中一段连续的元素序列，而不用引用整个集合。slice 是一种引用，所以它没有所有权。</p>`,31)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/Rust/Ownership.html","title":"所有权","lang":"zh-CN","frontmatter":{"title":"所有权"},"headers":[{"level":2,"title":"堆上的数据怎么释放？","slug":"堆上的数据怎么释放","link":"#堆上的数据怎么释放","children":[]},{"level":2,"title":"函数调用对生命周期的影响","slug":"函数调用对生命周期的影响","link":"#函数调用对生命周期的影响","children":[]},{"level":2,"title":"引用","slug":"引用","link":"#引用","children":[]},{"level":2,"title":"Slice","slug":"slice","link":"#slice","children":[]}],"git":{"updatedTime":1730017376000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Rust/Ownership.md"}');export{o as comp,u as data};
