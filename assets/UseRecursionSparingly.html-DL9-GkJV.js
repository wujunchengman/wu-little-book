import{_ as s,c as a,a as e,o as p}from"./app-Bah7_sEf.js";const l={};function t(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="慎用递归" tabindex="-1"><a class="header-anchor" href="#慎用递归"><span>慎用递归</span></a></h1><h2 id="起因" tabindex="-1"><a class="header-anchor" href="#起因"><span>起因：</span></a></h2><p>在学习Rust的时候，有一道语法练习题是计算斐波那契数列的第N项的值，这是一道非常简单的题，但是引发了一个使用递归性能问题，考虑到用Rust的人不多，后面的代码都是C#的，因为C#的语法更大众一些，更好看懂</p><h2 id="第一次解" tabindex="-1"><a class="header-anchor" href="#第一次解"><span>第一次解</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">ulong</span></span> <span class="token function">FibonacciNumberRecursion</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">FibonacciNumberRecursion</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">FibonacciNumberRecursion</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个写法非常的符合大脑思考，第一项返回0，第二项返回1，后面的返回前两项之和，简单测试没有任何问题。但是，这个算法有非常严重的性能问题，当n到40的时候，计算速度已经到了肉眼不可接受的地步，再往上就到了分钟级的了，造成运行缓慢的原因，就是递归会不停的压栈，存储当前的状态，这是非常没有必要的，于是我写了第二种解法</p><h2 id="第二次解" tabindex="-1"><a class="header-anchor" href="#第二次解"><span>第二次解</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">ulong</span></span> <span class="token function">FibonacciNumber</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">ulong</span></span> xSub1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">ulong</span></span> xSub2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">ulong</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">value</span> <span class="token operator">=</span> xSub1 <span class="token operator">+</span> xSub2<span class="token punctuation">;</span></span>
<span class="line">            xSub2 <span class="token operator">=</span> xSub1<span class="token punctuation">;</span></span>
<span class="line">            xSub1 <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span></span>
<span class="line">            x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">value</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次使用循环代替递归，它没有频繁的压栈，性能非常好，计算第200项的值也在纳秒级别，于是便有了思考，是否所有的递归都是这么不堪？经过查阅资料，发现第一次的递归有很多是无效递归，于是进行了改写</p><h3 id="第三次解" tabindex="-1"><a class="header-anchor" href="#第三次解"><span>第三次解</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">ulong</span></span> <span class="token function">FibonacciNumberRecursion2</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">ulong</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">ulong</span></span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 斐波那契数列是第N项等于前两项的和</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">FibonacciNumberRecursion2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次的递归使用了a和b两个变量去缓存前两项的值，这里看起来和实际情况是有差异的，它的计算过程更接近循环，因为a，b是从0，1开始往上加出来的，虽然递归是n-1。这里的n-1更像是为了达到终止递归的条件</p><p>经过修改的递归方法，性能和循环已经很接近了，只差一点点，那这个是不是递归已经非常强了？也不是，经过查阅资料，发现是编译器针对尾递归进行了优化，会用类似循环的机制来运行尾递归</p><p>尾递归：如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。尾递归函数的特点是在回归过程中不用做任何操作，这个特性很重要，因为大多数现代的编译器会利用这种特点自动生成优化的代码。</p><h3 id="第四次解" tabindex="-1"><a class="header-anchor" href="#第四次解"><span>第四次解</span></a></h3><p>经过上面的解法，经过编译器优化的尾递归已经很好了，但是还想看看如果没有优化的性能是什么样子呢？因为第一次解的速度慢不只是递归的原因，还有很多无意义计算，那么抛开无意义的计算，递归和循环有多少差距呢？</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">ulong</span></span> <span class="token function">FibonacciNumberRecursion3</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">ulong</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">ulong</span></span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 斐波那契数列是第N项等于前两项的和</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> r <span class="token operator">=</span> <span class="token function">FibonacciNumberRecursion3</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> z <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里使用了+1和-1，主要是为了破坏尾递归，那么最后的性能是怎样的呢</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">BenchmarkDotNet v0.13.10, Windows 10 (10.0.19045.3570/22H2/2022Update)</span>
<span class="line">AMD Ryzen 7 4800HS with Radeon Graphics, 1 CPU, 16 logical and 8 physical cores</span>
<span class="line">.NET SDK 8.0.100</span>
<span class="line">  [Host]     : .NET 6.0.25 (6.0.2523.51912), X64 RyuJIT AVX2</span>
<span class="line">  DefaultJob : .NET 6.0.25 (6.0.2523.51912), X64 RyuJIT AVX2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Method</th><th style="text-align:right;">Mean</th><th style="text-align:right;">Error</th><th style="text-align:right;">StdDev</th></tr></thead><tbody><tr><td>Loop</td><td style="text-align:right;">53.02 ns</td><td style="text-align:right;">0.111 ns</td><td style="text-align:right;">0.098 ns</td></tr><tr><td>Recursion2</td><td style="text-align:right;">52.98 ns</td><td style="text-align:right;">0.261 ns</td><td style="text-align:right;">0.232 ns</td></tr><tr><td>Recursion3</td><td style="text-align:right;">348.34 ns</td><td style="text-align:right;">4.367 ns</td><td style="text-align:right;">4.084 ns</td></tr></tbody></table><p>求第200项的值，Loop使用循环，Recursion2是尾递归，Recursion3是破环了尾递归的情况，从这上面来看，卫队贵对性能的影响还是很大的</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>上面4中求斐波那契数列的第N项值的写法，有不同的性能表现，使用循环和尾递归相差无几，如果是线性递归，那么性能就会差很多，因此</p><p>为了性能，优先使用循环解决问题，经过编译器优化的尾递归性能也不差，尽量避免使用普通的递归</p>`,24)]))}const o=s(l,[["render",t]]),r=JSON.parse('{"path":"/ExperienceSharing/UseRecursionSparingly.html","title":"慎用递归","lang":"zh-CN","frontmatter":{"title":"慎用递归"},"headers":[{"level":2,"title":"起因：","slug":"起因","link":"#起因","children":[]},{"level":2,"title":"第一次解","slug":"第一次解","link":"#第一次解","children":[]},{"level":2,"title":"第二次解","slug":"第二次解","link":"#第二次解","children":[{"level":3,"title":"第三次解","slug":"第三次解","link":"#第三次解","children":[]},{"level":3,"title":"第四次解","slug":"第四次解","link":"#第四次解","children":[]}]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"updatedTime":1729240878000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"ExperienceSharing/UseRecursionSparingly.md"}');export{o as comp,r as data};
