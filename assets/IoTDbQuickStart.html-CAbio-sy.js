import{_ as a,c as s,a as n,o as t}from"./app-Bah7_sEf.js";const i={};function l(d,e){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="iotdb快速启动" tabindex="-1"><a class="header-anchor" href="#iotdb快速启动"><span>IoTDB快速启动</span></a></h1><blockquote><p>本文结合工作实际应用，快速启动为从建数据库到上传/查询数据，不包含部署及使用细节，深入了解请详读官方文档</p></blockquote><h3 id="查看数据库" tabindex="-1"><a class="header-anchor" href="#查看数据库"><span>查看数据库</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">show databases</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>IoTDB支持通配符，可以通过<code>show databases root.x*</code>查看所有以root.x开头的数据库筛选结果</p><h3 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库"><span>创建数据库</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">create database root.device_log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里创建了一个<code>device_log</code>的数据库，需要注意的是,IoTDB要求数据库必须以root开头，多层级以<code>.</code>分割，并且被设置为数据库的路径总字符数不能超过64，包括路径开头的root.这5个字符。</p><h3 id="设置ttl-数据存活时间" tabindex="-1"><a class="header-anchor" href="#设置ttl-数据存活时间"><span>设置TTL（数据存活时间）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">set</span> ttl to root.device_log <span class="token number">2592000000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>IoTDB的TTL支持最多1000条规则，单位是毫秒，末尾使用<code>**</code>通配符</p><p>只设置路径的前一部分，会对最后补充<code>**</code></p><p>上面的配置TTL等同于给<code>root.device_log.**</code>配置30天有效期</p><p>如果多条TTL规则出现了冲突，以路径最为精确的为准</p><h3 id="创建设备模板" tabindex="-1"><a class="header-anchor" href="#创建设备模板"><span>创建设备模板</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">create device template d aligned<span class="token punctuation">(</span>level INT32 <span class="token assign-left variable">compression</span><span class="token operator">=</span>LZ4, event TEXT <span class="token assign-left variable">encoding</span><span class="token operator">=</span>DICTIONARY <span class="token assign-left variable">compression</span><span class="token operator">=</span>LZ4, message TEXT <span class="token assign-left variable">compression</span><span class="token operator">=</span>LZ4, side BOOLEAN <span class="token assign-left variable">compression</span><span class="token operator">=</span>LZ4<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>设备模板表示所有的设备都是相同的结构，通常来说，同一个型号采集的数据都是相同的，上面的例子中创建了模板<code>d</code>，主要目的是记录日志，所以创建了这几个测点</p><p>encoding指定了编码方式，compression指定了压缩方式</p><h3 id="挂载模板" tabindex="-1"><a class="header-anchor" href="#挂载模板"><span>挂载模板</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"> <span class="token builtin class-name">set</span> device template d to root.device_log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>官方推荐将模板挂载到数据库层面，所以这里的例子是将模板<code>d</code>挂载到<code>root.device_log</code></p><h3 id="开启自动注册序列" tabindex="-1"><a class="header-anchor" href="#开启自动注册序列"><span>开启自动注册序列</span></a></h3><p>自动注册序列可以在序列不存在时自动创建，这种手动创建的事情还是交给IoTDB自己处理好多</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">enable_auto_create_schema=true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>配置自动注册序列需要修改配置文件,在<code>conf</code>文件夹中的<code>iotdb-common.properties</code>文件修改</p>`,25)]))}const r=a(i,[["render",l]]),c=JSON.parse('{"path":"/Backend/IoTDB/IoTDbQuickStart.html","title":"IoTDB快速启动","lang":"zh-CN","frontmatter":{"title":"IoTDB快速启动"},"headers":[{"level":3,"title":"查看数据库","slug":"查看数据库","link":"#查看数据库","children":[]},{"level":3,"title":"创建数据库","slug":"创建数据库","link":"#创建数据库","children":[]},{"level":3,"title":"设置TTL（数据存活时间）","slug":"设置ttl-数据存活时间","link":"#设置ttl-数据存活时间","children":[]},{"level":3,"title":"创建设备模板","slug":"创建设备模板","link":"#创建设备模板","children":[]},{"level":3,"title":"挂载模板","slug":"挂载模板","link":"#挂载模板","children":[]},{"level":3,"title":"开启自动注册序列","slug":"开启自动注册序列","link":"#开启自动注册序列","children":[]}],"git":{"updatedTime":1732703631000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Backend/IoTDB/IoTDbQuickStart.md"}');export{r as comp,c as data};
