import{_ as r,c as t,a,o as n}from"./app-Bah7_sEf.js";const o={};function i(p,e){return n(),t("div",null,e[0]||(e[0]=[a('<h1 id="利用git更好的学习、参与开源项目" tabindex="-1"><a class="header-anchor" href="#利用git更好的学习、参与开源项目"><span>利用Git更好的学习、参与开源项目</span></a></h1><p>互联网上有许多的开源项目，开源项目非常的重要，通过阅读这些优秀的开源项目，可以迅速提升自己的开发水平，然而这些开源项目很多都是“代码即注释”，也就是只有代码，没有注释，对于大佬可能清晰明了，但是打着学习心态的我等菜鸡，确实不容易看懂，因此有时候还是希望补上自己看的注释。</p><p>我们不想这些注释只在本地，也希望注释可以上传到Git,但是开源项目的仓库肯定不行，针对这个问题，可以通过下面的方式来解决这个问题</p><h3 id="fork仓库" tabindex="-1"><a class="header-anchor" href="#fork仓库"><span>Fork仓库</span></a></h3><p>首先Clone开源项目<strong>原始</strong>仓库，此时的远程仓库origin为开源项目的地址</p><p>然后在对应的托管平台Fork对应的开源项目，得到属于自己的仓库地址</p><p>接着在本地的Git仓库配置中，添加远程仓库，名称任意，因为远程仓库名称不能重复，所以可以取除了origin之外的任意名称，比如说upstream，仓库地址就是Fork的仓库地址</p><p>此时仓库有两个远程地址，一个是原始的仓库地址，一个是Fork的地址</p><h3 id="建立分支" tabindex="-1"><a class="header-anchor" href="#建立分支"><span>建立分支</span></a></h3><p>添加好远程后创建一个新分支，分支名任意</p><p>创建好新分支后，切换到这个新分支，然后就可以在这个新分支上添加自己的注释了</p><p>当增加了一些注释后，便可以提交更改，然后推送到后面添加的远程分支，也就是非origin,我们自己Fork的分支上</p><p>这样，我们自己增加的注释就保存到Git上了</p><p>此时，这个代码仓库有两个远程地址，一个是本身的地址，一个是Fork的地址，其中Fork的地址拥有一个保存了增加注释的额外分支</p><h3 id="同步" tabindex="-1"><a class="header-anchor" href="#同步"><span>同步</span></a></h3><p>如果只是简单的将注释提交到Git,大可不必如此复杂，选用这种方式，是为了既保存额外的注释，又能够与开源项目的代码保持同步</p><p>如果要同步需要怎样操作呢？</p><p>首先将分支切换到要origin上同步的分支，然后拉取变更，然后再将分支合并到添加了注释的分支，再推送到远程，此时便同步了开源项目的代码变更</p>',18)]))}const c=r(o,[["render",i]]),l=JSON.parse('{"path":"/Infrastructure/Git/ReadOpenSoourceProject.html","title":"利用Git更好的学习、参与开源项目","lang":"zh-CN","frontmatter":{"title":"利用Git更好的学习、参与开源项目"},"headers":[{"level":3,"title":"Fork仓库","slug":"fork仓库","link":"#fork仓库","children":[]},{"level":3,"title":"建立分支","slug":"建立分支","link":"#建立分支","children":[]},{"level":3,"title":"同步","slug":"同步","link":"#同步","children":[]}],"git":{"updatedTime":1696333472000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Infrastructure/Git/ReadOpenSoourceProject.md"}');export{c as comp,l as data};
