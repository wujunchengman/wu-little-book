import{_ as s,c as a,a as p,o as e}from"./app-Bah7_sEf.js";const t={};function l(i,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="大量数据传输方案-条目多-非文件大" tabindex="-1"><a class="header-anchor" href="#大量数据传输方案-条目多-非文件大"><span>大量数据传输方案（条目多，非文件大）</span></a></h1><p>项目中有个需求是客户需要备份数据，这时候考虑了两种方案，一种是服务器直接生成备份文件，然后客户端直接下载这个备份文件，另一种方案是将数据直接发送到客户端，然后由客户端自己生成备份文件</p><p>在我们的项目中，有使用多种备份格式的需求，因此我们选择直接将数据发送到客户端。</p><p>数据直接发送到客户端有一个问题，就是备份的时候可能有几十万条数据，平常使用HTTP传输时使用JSON格式传输，但是当数据量大起来了之后，JSON产生的无效字符就显得非常多了，考虑到对带宽的影响，决定不使用JSON格式</p><h3 id="选型" tabindex="-1"><a class="header-anchor" href="#选型"><span>选型</span></a></h3><p>JSON是非常通用的格式，各种语言都提供了序列化和反序列化库，如果不使用JSON，就要寻找其它格式，这个格式应该满足两点：</p><ul><li>主流语言的序列化和反序列化库相对完善</li><li>序列化后应该比JSON小很多</li></ul><p>在这个项目中，后端使用的C#，客户端使用Tauri打包前端，因此需要寻找的就是C#和Javascript都支持序列化和反序列化的格式</p><p>最后的选择是：Protobuf</p><p>Protobuf很多人都是在gRPC中知道的，我也是。这个格式并不是只能在gRPC中使用，于是我的方案是在后端生成Protobuf字节数组，传输到前端后再交由Javascript反序列化还原数据</p><h3 id="服务端打包" tabindex="-1"><a class="header-anchor" href="#服务端打包"><span>服务端打包</span></a></h3><p>项目使用的是Asp.Net Core，因此这里的打包就是使用的.NET生态下的库了，如果是其他语言，则需要使用与之对应的库</p><h5 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖"><span>引入依赖</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">dotnet <span class="token function">add</span> package Google.Protobuf</span>
<span class="line">dotnet <span class="token function">add</span> package Grpc.Core</span>
<span class="line">dotnet <span class="token function">add</span> package Grpc.Tools</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="添加proto文件" tabindex="-1"><a class="header-anchor" href="#添加proto文件"><span>添加Proto文件</span></a></h5><div class="language-proto line-numbers-mode" data-highlighter="prismjs" data-ext="proto" data-title="proto"><pre><code><span class="line">syntax = &quot;proto3&quot;;</span>
<span class="line"></span>
<span class="line">import &quot;google/protobuf/timestamp.proto&quot;;</span>
<span class="line"></span>
<span class="line">package datalogpackage;</span>
<span class="line">option csharp_namespace = &quot;Example&quot;;</span>
<span class="line"></span>
<span class="line">message DataLogReply {</span>
<span class="line">	repeated DataLog dataLogs = 1;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">message DataLog {</span>
<span class="line">	// 设备号</span>
<span class="line">	int64 device_id =1;</span>
<span class="line"></span>
<span class="line">	// 时间戳</span>
<span class="line">	google.protobuf.Timestamp data_timestamp = 2;</span>
<span class="line"></span>
<span class="line">	// 可空整数型：温度</span>
<span class="line">	int32 temperature = 3;</span>
<span class="line"></span>
<span class="line">	// 可空整数型：湿度</span>
<span class="line">	int32 humidity = 4;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csproj line-numbers-mode" data-highlighter="prismjs" data-ext="csproj" data-title="csproj"><pre><code><span class="line">  &lt;ItemGroup&gt;</span>
<span class="line">    &lt;Protobuf Include=&quot;dataLog.proto&quot; GrpcServices=&quot;Client&quot; /&gt;</span>
<span class="line">  &lt;/ItemGroup&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就不讲Proto文件的语法了，只是简单的说说这个地方，Grpc.Tools用来将proto生成对应的类，需要在项目文件中配置一下</p><p>Grpc.Tools可以选择生成服务端和客户端的代码，因为这里的需求仅仅只是打包，不是弄一个gRPC服务，只生成Client客户端代码就行了</p><h5 id="生成字节数组" tabindex="-1"><a class="header-anchor" href="#生成字节数组"><span>生成字节数组</span></a></h5><p>Grpc.Tools根据proto文件生成对应的类之后，初始化对应的类，然后调用ToByteArray()进行打包</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">// 初始化Message</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    DataTimestamp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToUniversalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    DeviceId <span class="token operator">=</span> <span class="token number">52107010001</span><span class="token punctuation">,</span></span>
<span class="line">    Temperature <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">,</span></span>
<span class="line">    Humidity <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">DataLogReply</span> dataLogReply <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataLogReply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> DataLogs <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>DataLog<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> z<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用ToByteArray()得到序列化后的字节数组</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> dataLogReply<span class="token punctuation">.</span><span class="token function">ToByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到字节数组后，可以选择自己喜欢的协议传给客户端，在这个项目中使用的是HTTP协议</p><h3 id="客户端反序列化" tabindex="-1"><a class="header-anchor" href="#客户端反序列化"><span>客户端反序列化</span></a></h3><h5 id="引入依赖-1" tabindex="-1"><a class="header-anchor" href="#引入依赖-1"><span>引入依赖</span></a></h5><p>前端使用<a href="https://github.com/protobufjs/protobuf.js" target="_blank" rel="noopener noreferrer">protobuf.js</a>来反序列化数据，这也是官方推荐的JS库</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">pnpm</span> <span class="token function">install</span> protobufjs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="反序列化数据" tabindex="-1"><a class="header-anchor" href="#反序列化数据"><span>反序列化数据</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> load <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;protobufjs&quot;</span><span class="token punctuation">;</span> <span class="token comment">// respectively &quot;./node_modules/protobufjs&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;datalog.proto&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">throw</span> err<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> DataLogReplyMessage <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">lookupType</span><span class="token punctuation">(</span><span class="token string">&quot;datalogpackage.DataLogReply&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        url<span class="token operator">:</span> <span class="token string">&quot;http://localhost:5273/test&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        responseType<span class="token operator">:</span> <span class="token string">&#39;arraybuffer&#39;</span> <span class="token comment">// 设置响应类型为ArrayBuffer</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 现在response.data是ArrayBuffer类型</span></span>
<span class="line">          <span class="token keyword">var</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">buffer = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 处理bytes...</span></span>
<span class="line"></span>
<span class="line">          <span class="token keyword">let</span> decoded <span class="token operator">=</span> DataLogReplyMessage<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">decoded = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求失败&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面需要注意的是decode方法需要字节数组作为参数，而使用axios获得的数据默认情况下并不是字节数组，需要特别执行responseType和使用Uint8Array转换</p>`,30)]))}const c=s(t,[["render",l]]),u=JSON.parse('{"path":"/ExperienceSharing/MassDataTransfer.html","title":"大量数据传输解决方案（替换默认的JSON）","lang":"zh-CN","frontmatter":{"title":"大量数据传输解决方案（替换默认的JSON）"},"headers":[{"level":3,"title":"选型","slug":"选型","link":"#选型","children":[]},{"level":3,"title":"服务端打包","slug":"服务端打包","link":"#服务端打包","children":[]},{"level":3,"title":"客户端反序列化","slug":"客户端反序列化","link":"#客户端反序列化","children":[]}],"git":{"updatedTime":1729240935000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"ExperienceSharing/MassDataTransfer.md"}');export{c as comp,u as data};
