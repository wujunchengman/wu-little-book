import{_ as t,c as i,a as e,o as a}from"./app-Bah7_sEf.js";const s={};function n(r,l){return a(),i("div",null,l[0]||(l[0]=[e(`<h1 id="通过polly优雅地处理重试、熔断降级" tabindex="-1"><a class="header-anchor" href="#通过polly优雅地处理重试、熔断降级"><span>通过Polly优雅地处理重试、熔断降级</span></a></h1><p>当需要在项目中请求外部项目时，就不可避免的需要考虑服务故障、网络故障等问题，Polly提供了这种问题的优雅解决方案</p><p><strong>Polly的功能</strong></p><ul><li>失败重试</li><li>服务熔断</li><li>超时处理</li><li>舱壁隔离</li><li>缓存策略</li><li>失败降级</li><li>组合策略（将上面的策略组合起来）</li></ul><p>在Asp.Net Core中需要安装3个包</p><table><thead><tr><th>包名</th><th>描述</th></tr></thead><tbody><tr><td>Polly</td><td>Polly的核心包</td></tr><tr><td>Polly.Extensions.Http</td><td>Polly基于Http的一些扩展</td></tr><tr><td>Microsoft.Extensions.Http.Polly</td><td>Polly基于HttpClient factory的一些扩展</td></tr></tbody></table><p>Polly的使用步骤</p><ul><li><p>定义要处理的异常类型或返回值</p></li><li><p>定义要处理的动作（重试、熔断、降级响应等）</p></li><li><p>使用定义的策略来执行代码</p></li></ul><p>不同场景下的策略选择</p><ul><li>适合失败重试的场景 <ul><li>服务“失败”是短暂的，可自愈的</li><li>服务是幂等的，重复调用不会有副作用</li><li>例：网络闪断、部分服务节点异常</li><li>最佳实践：设置失败重试次数、设置带有步长策略的失败等待间隔、设置降级响应、设置断路器</li></ul></li></ul><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)]))}const p=t(s,[["render",n]]),d=JSON.parse('{"path":"/AspNetCore/TripartiteLibrary/Polly.html","title":"Polly优雅地处理重试、熔断降级","lang":"zh-CN","frontmatter":{"title":"Polly优雅地处理重试、熔断降级"},"headers":[],"git":{"updatedTime":1698914379000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"AspNetCore/TripartiteLibrary/Polly.md"}');export{p as comp,d as data};
