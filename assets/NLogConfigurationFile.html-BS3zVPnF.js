import{_ as a,c as s,a as t,o as e}from"./app-Bah7_sEf.js";const o={};function l(p,n){return e(),s("div",null,n[0]||(n[0]=[t(`<h1 id="nlog-配置文件" tabindex="-1"><a class="header-anchor" href="#nlog-配置文件"><span>NLog 配置文件</span></a></h1><blockquote><p>因为很多文章都只讲讲怎么在.Net 项目中记录日志，但是这只是简单的能记录，日志不光要记录，还要记好，于是我再讲讲 NLog 的配置文件，让大家可以更符合需求的记录日志</p></blockquote><h2 id="nlog-配置文件的位置" tabindex="-1"><a class="header-anchor" href="#nlog-配置文件的位置"><span>NLog 配置文件的位置</span></a></h2><ul><li>NLog 必须要有配置文件才会工作，否则它将什么都不做</li><li>如果同时存在多个 NLog 配置文件，则以找到的第一个为准，当 NLog 找到配置文件之后，会停止查找，而不是继续查找覆盖前面的配置文件</li></ul><h3 id="nlog-默认查找配置文件的位置" tabindex="-1"><a class="header-anchor" href="#nlog-默认查找配置文件的位置"><span>NLog 默认查找配置文件的位置</span></a></h3><h4 id="独立应用程序" tabindex="-1"><a class="header-anchor" href="#独立应用程序"><span>独立应用程序</span></a></h4><ul><li>应用程序的<code>app.config</code>配置文件</li><li>应用程序所在目录下的<code>.nlog</code>后缀文件(暂未验证文件名是否必须与应用程序名相同)</li><li>应用程序所在目录下的<code>NLog.config</code>文件</li><li>NLog.dll 所在目录下的<code>Nlog.dll.nlog</code>（仅当 GAC 中没安装 NLog 时生效）注：GAC 还不清楚是什么的缩写，但是这条目前没有遇到过</li></ul><h4 id="asp-net-应用程序-以前的-asp-net-必须依赖-iis-运行-所以单独提出来" tabindex="-1"><a class="header-anchor" href="#asp-net-应用程序-以前的-asp-net-必须依赖-iis-运行-所以单独提出来"><span>ASP.NET 应用程序（以前的 ASP.NET 必须依赖 IIS 运行，所以单独提出来）</span></a></h4><ul><li>Web 应用程序的<code>web.config</code>配置文件</li><li>web.config 所在目录下的<code>web.nlog</code>文件</li><li>Web 应用程序所在目录下的<code>NLog.config</code>文件</li><li>NLog.dll 所在目录下的<code>Nlog.dll.nlog</code>（仅当 GAC 中没安装 NLog 时生效）注：GAC 还不清楚是什么的缩写，但是这条目前没有遇到过</li></ul><h4 id="appsettings-json" tabindex="-1"><a class="header-anchor" href="#appsettings-json"><span>appsettings.json</span></a></h4><p>NLog5 可以将配置文件写在 appsettings.json 文件中，这是 .Net Core/.Net 项目默认的配置文件，同时支持根据环境变量加载不同的配置</p><p>要让 NLog 从 appsettings.json 文件中读取配置需要 NLog.Extensions.Logging 或者 NLog.Web.AspNetCore 插件</p><h3 id="nlog-显式指定配置文件" tabindex="-1"><a class="header-anchor" href="#nlog-显式指定配置文件"><span>NLog 显式指定配置文件</span></a></h3><p>用的很少，几乎没必要，如果是 Xamarin、Android 项目可以看一看<a href="https://github.com/NLog/NLog/wiki/Explicit-NLog-configuration-loading" target="_blank" rel="noopener noreferrer">Explicit NLog configuration loading</a></p><h2 id="详解-nlog-配置文件" tabindex="-1"><a class="header-anchor" href="#详解-nlog-配置文件"><span>详解 Nlog 配置文件</span></a></h2><p>独立的 NLog 配置文件是一个 XML 格式的文件，无论是什么文件后缀。如果 Nlog 的配置信息共用了应用程序的配置文件，则以应用程序的配置文件为准，也就是说，如果将 NLog 的配置写在 appsettings.json 文件中，则配置将以 Json 格式表达。虽然可能配置文件的格式不同，但是配置文件的层级结构和规则是相同的</p><p>先看一个最简单的 Nlog 配置文件</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nlog</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.nlog-project.org/schemas/NLog.xsd<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targets</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 日志写入文件file.txt --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logfile<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>File<span class="token punctuation">&quot;</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file.txt<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 日志输出到控制台 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logconsole<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Console<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targets</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rules</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 日志输出规则，写入到前面定义的logconsole Target --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minlevel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Info<span class="token punctuation">&quot;</span></span> <span class="token attr-name">writeTo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logconsole<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 日志输出规则，写入到前面定义的logfile Target --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minlevel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Debug<span class="token punctuation">&quot;</span></span> <span class="token attr-name">writeTo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logfile<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rules</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nlog</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置文件中，nlog 空间下有两个元素，一个是 targets，一个是 rules。</p><p>其中 targets 定义一组 target，每一个 target 有 name 和 xsi:type 属性，它们分别定义了这个 target 的名字，和日志输出的位置。在这个最简单的 NLog 配置文件中定义的 Target，logfile 将日志写入文件，logconsole 将日志写入控制台。</p><p>rules 定义了一组日志输出规则，它决定了要输出哪些日志，以及日志输出到哪里。这里定义了两条规则，他们的 name 都是<code>*</code>，.Net 中的日志会记录类的完成名称（包括命名空间），当 name 指定为<code>*</code>的时候，就会去匹配所有的日志信息；minlevel 则指定了日志输出的最低级别，writeTo 指定调用对应的 target 进行日志输出。所以这两条 logger 规则会匹配所有的日志，然后将日志级别高等等于 Info 的按照 logconsole 的规则写入到控制台，将日志级别高于等于 Debug 的按照 logfile 的规则写入到文件。</p><p>读完这个最简单 NLog 配置文件，也算对 NLog 的配置有一点了解了，那么下面我们就详细讲讲 NLog 的配置</p><h3 id="nlog-的顶层元素" tabindex="-1"><a class="header-anchor" href="#nlog-的顶层元素"><span>NLog 的顶层元素</span></a></h3><p>从前面的例子可以看到，nlog 命名空间下会有 targets 和 rules 元素，除了这两个元素，nlog 的顶层元素还有 extensions、include、variable 三个元素，nlog 的顶层空间一共有五个元素，其中 targets 和 rules 元素是必须的，而 extensions、include、variable 三个元素是可选的，下面就来详解这几个 nlog 的顶层元素</p><h4 id="targets" tabindex="-1"><a class="header-anchor" href="#targets"><span>Targets</span></a></h4><p>targets 包含多个 target，每一个 target 都是一条日志输出规则。每一个 target 都必须有 name 和 type（当使用了 xml 命名空间时为 xsi:type）属性，name 指名规则的名字，在 rules 的记录规则中根据对应的名字匹配对应的输出规则，而 type 则指定了日志记录到何处。</p><p>NLog 自带了多种 target，同时也可以自定义 target，这里只讲讲几种常见的，其他的也都是差不多的，相信大家都是可以举一反三的，为了方便，也是因为我一般都是简单的写入文件，其他的也用的少</p><p>每一个 target，除了 name 和 type，还根据不同的 type 会有不同属性，比如说 type 为 File 会有 fileName 属性，而 type 为 Console 则是没有 fileName 这个属性的</p><h5 id="console" tabindex="-1"><a class="header-anchor" href="#console"><span>Console</span></a></h5><p>Console 是最简单的 Target，因为只是简单的将日志信息输出到控制台，它的属性非常的少。</p><table><thead><tr><th>属性名</th><th>值类型</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>xsi:type</td><td>Console</td><td>日志输出类型</td><td>是</td></tr><tr><td>name</td><td>String</td><td>target规则名称</td><td>是</td></tr><tr><td>layout</td><td>Layout</td><td>日志模板，如果不指定则使用默认Layout（后面详细说Layout怎么写）</td><td>是</td></tr><tr><td>footer</td><td>Layout</td><td>日志尾模板（后面详细说Layout怎么写）</td><td>否</td></tr><tr><td>header</td><td>Layout</td><td>日志头模板（后面详细说Layout怎么写）</td><td>否</td></tr><tr><td>encoding</td><td>Encoding</td><td>编码格式，比如&quot;utf-8&quot;</td><td>否</td></tr><tr><td>StdErr</td><td>Boolean</td><td>是否应使用错误流(stderr)而不是输出流(stdout)，默认为False，NLog5以前该属性名为error</td><td>否</td></tr><tr><td>detectConsoleAvailable</td><td>Boolean</td><td>在未检测到控制台是是否禁用，默认为False</td><td>否</td></tr><tr><td>writeBuffer</td><td>Boolean</td><td>使用Console.Write代替Console。WriteLine，与AysncWrapper结合使用时，将允许批处理并且会有双倍的性能。在云功能中重定向控制台时很有用，默认为False</td><td>否</td></tr><tr><td>autoFlush</td><td>Boolean</td><td>在每次控制台写入后执行显示刷新。如果已重定向到未启用自动刷新的自定义控制台流，则很有用，默认值为False</td><td>否</td></tr></tbody></table><p>注：默认layout模板：<code>\${longdate}|\${level:uppercase=true}|\${logger}|\${message:withexception=true}</code></p>`,32)]))}const i=a(o,[["render",l]]),u=JSON.parse('{"path":"/Ecosystem/NLog/NLogConfigurationFile.html","title":"NLog配置文件","lang":"zh-CN","frontmatter":{"title":"NLog配置文件","description":"NLog配置文件"},"headers":[{"level":2,"title":"NLog 配置文件的位置","slug":"nlog-配置文件的位置","link":"#nlog-配置文件的位置","children":[{"level":3,"title":"NLog 默认查找配置文件的位置","slug":"nlog-默认查找配置文件的位置","link":"#nlog-默认查找配置文件的位置","children":[]},{"level":3,"title":"NLog 显式指定配置文件","slug":"nlog-显式指定配置文件","link":"#nlog-显式指定配置文件","children":[]}]},{"level":2,"title":"详解 Nlog 配置文件","slug":"详解-nlog-配置文件","link":"#详解-nlog-配置文件","children":[{"level":3,"title":"NLog 的顶层元素","slug":"nlog-的顶层元素","link":"#nlog-的顶层元素","children":[]}]}],"git":{"updatedTime":1658831819000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Ecosystem/NLog/NLogConfigurationFile.md"}');export{i as comp,u as data};
