import{_ as s,c as a,a as e,o as t}from"./app-Bah7_sEf.js";const p={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="一个最简单的鉴权、授权" tabindex="-1"><a class="header-anchor" href="#一个最简单的鉴权、授权"><span>一个最简单的鉴权、授权</span></a></h1><p>Asp.Net Core内置了授权鉴权的支持，这里简单写一个使用内置的默认的最基本的鉴权方案的例子</p><h2 id="添加授权中间件" tabindex="-1"><a class="header-anchor" href="#添加授权中间件"><span>添加授权中间件</span></a></h2><p>添加认证中间件，认证中间件与授权中间件单词有点像，注意不要搞错了，授权中间件在模板中是默认添加了的，认证中间件是需要手动添加的</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// 认证中间件要在授权中间件之前，Asp.Net Core的中间件管道是与顺序相关的</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 认证中间件（需要自己添加）</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 授权中间件（模板已经添加好了）</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container caution"><p class="hint-container-title">特别注意</p><p>如果没有添加认证中间件，那么后续对资源进行鉴权时会鉴权不过</p></div><h2 id="配置认证服务" tabindex="-1"><a class="header-anchor" href="#配置认证服务"><span>配置认证服务</span></a></h2><p>除了添加认证中间外，还需要在IOC容器中注入身份认证服务，并配置认证方案</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// CookieAuthenticationDefaults.AuthenticationScheme值为Cookies，</span></span>
<span class="line"><span class="token comment">// AddAuthentication()中的字符串名字代表了默认要使用的认证方案</span></span>
<span class="line"><span class="token comment">// 这里是指定默认的认证方式为Cookies</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 添加Cookie认证方式，这里AddCookie()提供了两个参数，第一个参数指定了身份验证方案名</span></span>
<span class="line">    <span class="token comment">// 第二个参数是一个Action委托，用于指定认证行为</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> options <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果没有认证跳转到的登陆地址</span></span>
<span class="line">        options<span class="token punctuation">.</span>LoginPath <span class="token operator">=</span> <span class="token string">&quot;/Account/Login&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 拒绝访问时跳转到的地址</span></span>
<span class="line">        options<span class="token punctuation">.</span>AccessDeniedPath <span class="token operator">=</span> <span class="token string">&quot;/forbid&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 还有很多其他配置选项</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Cookie对于未认证用户访问的处理</p><p>对于默认的Cookie行为，如果用户没认证，则会返回302重定向到登录地址，默认的登陆地址是/Account/Login，如果没有使用这个地址，则需要向上面一样进行手动指定（这里我指定的与默认的一致，可以省略，这里只是为了展示配置项）</p></div><h2 id="对资源添加认证保护" tabindex="-1"><a class="header-anchor" href="#对资源添加认证保护"><span>对资源添加认证保护</span></a></h2><p>最简单的授权要求，就是用户已认证，如果一个需要将资源添加简单的保护，可以使用这个策略</p><p>要求必须是已认证用户才能访问对应的资源，只需要为对应的资源添加Authorize特性</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">ControllerBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AllowAnonymous</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;登陆成功&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;退出登陆成功&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里将Authorize特性添加到Controller，代表该Controller下的所有Action均需要已认证才能访问，但是这是一个身份认证的Controller，如果连登录也必须身份认证通过才能通过，就变成了允许访问才能拿到认证和必须有认证才能访问的死循环了，于是提供了AllowAnonymous特性，被AllowAnonymous标注的资源将不需要任何授权，访问权限变成了公开，谁都可以访问</p><h2 id="设置身份认证cookie" tabindex="-1"><a class="header-anchor" href="#设置身份认证cookie"><span>设置身份认证Cookie</span></a></h2><p>前面设置了需要经过认证的用户才能访问资源，然后认证的默认方案设置的是Cookie，这里再简单讲讲怎么设置这个认证Cookie</p><p>Asp.Net Core提供了一个SignInAsync的扩展方法，通过这个方法可以快速设置用于身份认证的Cookie</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AllowAnonymous</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 身份信息，会被解析到HttpContext.User中</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//这里方案的ClaimsIdentity的构造函数的参数要和下面的SignInAsync的方案名一致</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> claimIdentity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    claimIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将身份信息编码后写入Cookie</span></span>
<span class="line">    <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignInAsync</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>claimIdentity<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 凭据过期时间</span></span>
<span class="line">            ExpiresUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;登陆成功&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个SignInAsync是针对Cookie身份认证的，对于JWT或者自定义身份认证都没有意义</p><p>要退出登录也非常简单</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;logout&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignOutAsync</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;退出登陆成功&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需调用对应的SignOutAsync方法，传入对应的方案名即可</p><p>SignOutAsync和SignInAsync是针对Asp.Net Core框架自带的Cookie认证方案提供的一组快捷方法</p>`,24)]))}const o=s(p,[["render",i]]),u=JSON.parse('{"path":"/AspNetCore/Authorization/Sample.html","title":"一个简单的鉴权、授权","lang":"zh-CN","frontmatter":{"title":"一个简单的鉴权、授权"},"headers":[{"level":2,"title":"添加授权中间件","slug":"添加授权中间件","link":"#添加授权中间件","children":[]},{"level":2,"title":"配置认证服务","slug":"配置认证服务","link":"#配置认证服务","children":[]},{"level":2,"title":"对资源添加认证保护","slug":"对资源添加认证保护","link":"#对资源添加认证保护","children":[]},{"level":2,"title":"设置身份认证Cookie","slug":"设置身份认证cookie","link":"#设置身份认证cookie","children":[]}],"git":{"updatedTime":1663594874000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"AspNetCore/Authorization/Sample.md"}');export{o as comp,u as data};
