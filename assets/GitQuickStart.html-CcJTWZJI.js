import{_ as i,c as a,a as t,o as n}from"./app-Bah7_sEf.js";const l={};function s(c,e){return n(),a("div",null,e[0]||(e[0]=[t(`<h2 id="git用来干什么" tabindex="-1"><a class="header-anchor" href="#git用来干什么"><span>Git用来干什么？</span></a></h2><p>Git是一个版本管理工具，几乎所有的现代开发中都使用了Git进行版本管理。它可以更好的记录每次代码的变动，也可以非常方便的回退到以前的某个版本，又或者将多个不同的版本合并到一起得到一个统一的版本，是针对开发管理、团队协作等场景非常强大且趁手的工具</p><h2 id="git使用前的配置" tabindex="-1"><a class="header-anchor" href="#git使用前的配置"><span>Git使用前的配置</span></a></h2><p>在使用Git时，需要进行一些配置，比如最基本的用户信息，当你提交代码的时候，总得知道是谁提交的</p><p>Git的配置分为三级：系统级、用户级、本地仓库级，范围越小的优先级越高，一般情况下只用到用户级和本地仓库级，很少会用到系统级</p><p>Git使用了<code>git config</code>工具进行读写配置，下面是一个配置用户信息的示例，安装好Git的第一步就是配置用户信息</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"></span>
<span class="line"><span class="token comment"># 配置Git用户信息的用户名</span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;用户名&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 配置Git用户信息的邮箱地址</span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;邮箱地址&quot;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户名和邮件地址很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，且不可更改</p><p>这里使用了<code>--global</code>选项，它指定了配置写入到用户级，只要使用的是这个用户，那么提交时都将使用该用户信息（没有配置本地仓库级用户信息），通常情况下一个系统用户提交时使用的用户信息都是相同的，该选项可以避免每个仓库都重复配置相同的信息</p><p>上面提到Git配置分为三级，<code>--global</code>配置用户级，如果要配置系统级，使用<code>--system</code>；如果要配置本地仓库级，使用<code>--local</code>，配置本地仓库级时，必须进入到对应的本地仓库中才行，另外，git config 的默认级别也是本地仓库级，因此进行本地仓库级配置时也可以不加<code>--local</code>选项</p><h2 id="初始化仓库" tabindex="-1"><a class="header-anchor" href="#初始化仓库"><span>初始化仓库</span></a></h2><p>配置好基本的用户信息后，就是初始化Git仓库，初始化Git仓库有两种方式：1、使用<code>git init</code>指令在当前目录下初始化仓库（前提是当前目录不是Git仓库，也不是Git仓库中的子目录）；2、使用<code>git clone</code>克隆现有仓库，克隆现有仓库的命令是<code>git clone &lt;url&gt;</code>，克隆现有仓库时，还可以在url后面指定目录名字，而不是默认的名字：<code>git clone https://github.com/libgit2/libgit2 mylibgit</code>，如果不指定最后的<code>mylibgit</code>，克隆的仓库会放在名为<code>libgit2</code>目录下，而当前命令会将克隆的仓库放在<code>mylibgit</code>目录下</p><h2 id="git中的工作区、暂存区和版本库" tabindex="-1"><a class="header-anchor" href="#git中的工作区、暂存区和版本库"><span>Git中的工作区、暂存区和版本库</span></a></h2><p>工作区：在文件系统中，看到的目录、文件都是工作区的内容，也就是说文件系统中内容就是工作区的内容</p><p>版本库：版本库在存放于文件系统中的<code>.git</code>隐藏目录，通常情况下，不建议手动去操作这个目录中的任何内容，版本库记录了该Git仓库中所有的提交记录、历史信息、变更信息等等一切信息</p><p>暂存区：暂存区顾名思义，它是工作区和版本库的中间缓冲，工作区的内容发生了变更，需要先提交到暂存区，再从暂存区提交到版本库，这样设计是为了精细化控制，比如说工作区提交</p><h2 id="提交" tabindex="-1"><a class="header-anchor" href="#提交"><span>提交</span></a></h2><p>Git工作区中的文件有两种状态：已跟踪或未跟踪。已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后， 它们的状态可能是未修改，已修改或已放入暂存区。简而言之，已跟踪的文件就是 Git 已经知道的文件。工作目录中除已跟踪文件外的其它所有文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有被放入暂存区。</p><h2 id="推送" tabindex="-1"><a class="header-anchor" href="#推送"><span>推送</span></a></h2><p>基本的 Git 工作流程如下：</p><ol><li><p>在工作区中修改文件。</p></li><li><p>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</p></li><li><p>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</p></li></ol><p>Git项目拥有三个阶段：工作区、暂存区、Git目录</p><p>Git中的文件有三种状态：已提交、已修改、已暂存</p><h2 id="git中的基本概念" tabindex="-1"><a class="header-anchor" href="#git中的基本概念"><span>Git中的基本概念</span></a></h2><h3 id="仓库-分支-暂存区-git的基本流程与操作-提交变更-推送远程-创建分支-合并分支" tabindex="-1"><a class="header-anchor" href="#仓库-分支-暂存区-git的基本流程与操作-提交变更-推送远程-创建分支-合并分支"><span>仓库 ### 分支 ### 暂存区 ## Git的基本流程与操作 - 提交变更 - 推送远程 - 创建分支 - 合并分支</span></a></h3><h2 id="更好的团队协作-main分支-development分支-bugfix分支-feature-分支" tabindex="-1"><a class="header-anchor" href="#更好的团队协作-main分支-development分支-bugfix分支-feature-分支"><span>更好的团队协作 - <code>main</code>分支 - <code>development</code>分支 - <code>bugfix</code>分支 - <code>&lt;feature&gt;</code>分支</span></a></h2>`,26)]))}const o=i(l,[["render",s]]),p=JSON.parse('{"path":"/Tools/GitQuickStart.html","title":"Git快速启动","lang":"zh-CN","frontmatter":{"title":"Git快速启动","sidebar":"auto"},"headers":[{"level":2,"title":"Git用来干什么？","slug":"git用来干什么","link":"#git用来干什么","children":[]},{"level":2,"title":"Git使用前的配置","slug":"git使用前的配置","link":"#git使用前的配置","children":[]},{"level":2,"title":"初始化仓库","slug":"初始化仓库","link":"#初始化仓库","children":[]},{"level":2,"title":"Git中的工作区、暂存区和版本库","slug":"git中的工作区、暂存区和版本库","link":"#git中的工作区、暂存区和版本库","children":[]},{"level":2,"title":"提交","slug":"提交","link":"#提交","children":[]},{"level":2,"title":"推送","slug":"推送","link":"#推送","children":[]},{"level":2,"title":"Git中的基本概念","slug":"git中的基本概念","link":"#git中的基本概念","children":[{"level":3,"title":"仓库 ### 分支 ### 暂存区 ## Git的基本流程与操作 - 提交变更 - 推送远程 - 创建分支 - 合并分支","slug":"仓库-分支-暂存区-git的基本流程与操作-提交变更-推送远程-创建分支-合并分支","link":"#仓库-分支-暂存区-git的基本流程与操作-提交变更-推送远程-创建分支-合并分支","children":[]}]},{"level":2,"title":"更好的团队协作 - main分支 - development分支 - bugfix分支 - <feature>分支","slug":"更好的团队协作-main分支-development分支-bugfix分支-feature-分支","link":"#更好的团队协作-main分支-development分支-bugfix分支-feature-分支","children":[]}],"git":{"updatedTime":1699847241000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":2}]},"filePathRelative":"Tools/GitQuickStart.md"}');export{o as comp,p as data};
