import{_ as a,c as n,a as e,o as p}from"./app-Bah7_sEf.js";const c={};function t(l,s){return p(),n("div",null,s[0]||(s[0]=[e(`<p>一个现实中的项目，基本不会出现一个文件就解决了问题，通常都会根据不同的功能、逻辑进行分拆，Rust提供了多种不同范围的作用域，用以更好的管理项目</p><h2 id="工作空间" tabindex="-1"><a class="header-anchor" href="#工作空间"><span>工作空间</span></a></h2><h2 id="crate" tabindex="-1"><a class="header-anchor" href="#crate"><span>crate</span></a></h2><p>crate是Rust在编译时的最小代码单位，这意味着如果你觉得项目每次编译都耗费大量时间的时候，可以将代码拆分为多个crate，这样没有改动的代码就不会再重复编译，编译速度也会得到提升</p><p>crate有两种形式：二进制项和库</p><p>二进制项可以被编译为可执行程序，它们必须有一个 main 函数来定义当程序被执行的时候所需要做的事情</p><p>库并没有 main 函数，它们也不会编译为可执行程序，它们提供一些诸如函数之类的东西，使其他项目也能使用这些东西。大多数时间 Rustaceans 说的 crate 指的都是库，这与其他编程语言中 library 概念一致</p><h2 id="包-package" tabindex="-1"><a class="header-anchor" href="#包-package"><span>包（package）</span></a></h2><p>包（package）是提供一系列功能的一个或者多个 crate。一个包会包含一个 Cargo.toml 文件，阐述如何去构建这些 crate。Cargo 就是一个包含构建你代码的二进制项的包。Cargo 也包含这些二进制项所依赖的库。其他项目也能用 Cargo 库来实现与 Cargo 命令行程序一样的逻辑。</p><p>包中可以包含至多一个库 crate(library crate)。包中可以包含任意多个二进制 crate(binary crate)，但是必须至少包含一个 crate（无论是库的还是二进制的）。</p><p>创建一个包通常使用<code>cargo new</code>命令（Cargo 是 Rust 的构建系统和包管理器，在与C/C++的对比中，Rust不一定说占尽优势，但是Cargo一定是比Make/CMake这些更加现代化的）</p><p>cargo对crate的识别通过约定的文件名：<code>src/main.rs</code>表示这是一个二进制crate，名字与包名相同；<code>src/lib.rs</code>表示这是一个库crate，名字与包名相同</p><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h2><p>模块有点类似C#中的名字空间(namespace)</p><p>Cargo在编译时会怎样搜索模块呢？首先是内联，使用<code>mod &lt;模块名&gt; { }</code>，大括号内的就是模块内的代码；其次是检查<code>src/模块名.rs</code>，根据文件名直接匹配，<code>模块名.rs</code>中的代码就是模块中的代码；最后是在<code>src/模块名/mod.rs</code>，如果是模块名作为文件夹，则必须要求对应模块名文件夹中有<code>mod.rs</code>文件，此时整个文件夹都会作为模块内的代码</p><p>当模块不是内联时，只需在模块树中的某处使用一次 mod 声明就可以加载这个文件。一旦编译器知道了这个文件是项目的一部分（并且通过 mod 语句的位置知道了代码在模块树中的位置），项目中的其他文件应该使用其所声明的位置的路径来引用那个文件的代码，这在“引用模块项目的路径”部分有讲到。换句话说，mod 不是 你可能会在其他编程语言中看到的 &quot;include&quot; 操作。</p><p>模块是可以嵌套的，最外层的模块搜索时的根文件夹是<code>src</code>，而模块的子模块对应的根文件夹则是父模块对应文件夹</p><p>模块中的代码默认是私有的，即使是对父模块也是私有的，如果需要声明公用模块，需要使用<code>pub mod</code></p><p>使用模块中的成员，与C#使用对应名字空间中成员类似，直接使用完整路径，或者使用<code>use</code>(C#使用using关键字，不过F#也是使用use)导入对应的成员</p><p>导入（引入）对应模块，有两种路径方式：相对路径和绝对路径，相对路径和C#之类的类似，以当前路径作为起点进行查找；绝对路径则是从项目的最外层开始找，那么最外层是模块是什么呢？最外层模块就是<code>crate</code>，所以在使用时，如果以<code>crate</code>开头，就代表这个模块地址是绝对路径，从最外层开始查找</p><p>如果引入有两个相同的名称会冲突，这时候可以使用as关键字重命名</p><p>如果引入的名称也需要再导出（允许其它模块引入），可以使用<code>pub use</code>关键字</p><p>如果要引入外部包的模块，则use以包名为根</p><p>use可以嵌套，以消除大量的use行</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token comment">// 合并嵌套写法</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">,</span> io<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 等效替代</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当嵌套写法有当前路径和子路径时，可以用self替代当前路径</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 等效替代</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Write</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要将所有的公有项引入作用域，可以指定路径后跟<code>*</code></p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,29)]))}const i=a(c,[["render",t]]),r=JSON.parse('{"path":"/Rust/Project.html","title":"项目管理","lang":"zh-CN","frontmatter":{"title":"项目管理"},"headers":[{"level":2,"title":"工作空间","slug":"工作空间","link":"#工作空间","children":[]},{"level":2,"title":"crate","slug":"crate","link":"#crate","children":[]},{"level":2,"title":"包（package）","slug":"包-package","link":"#包-package","children":[]},{"level":2,"title":"模块","slug":"模块","link":"#模块","children":[]}],"git":{"updatedTime":1742990576000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Rust/Project.md"}');export{i as comp,r as data};
