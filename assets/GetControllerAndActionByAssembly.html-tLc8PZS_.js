import{_ as s,c as a,a as t,o as p}from"./app-Bah7_sEf.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="通过assembly程序集获取所有controller和action" tabindex="-1"><a class="header-anchor" href="#通过assembly程序集获取所有controller和action"><span>通过Assembly程序集获取所有Controller和Action</span></a></h1><p>在设计系统权限的时候，很多时候需要精细化控制权限，需要控制每个角色能够访问的Action，在配置的时候，需要获取所有的Controller和Action，这时候使用反射是最简单的方式</p><p>首先使用Assembly.Load方法加载Assembly，然后使用GetTypes方法获取所有的类型</p><p>然后对所有类型进行筛选，首先需要明确Controller类型有什么特点：首先按照规范应该是Controller结尾，然后父类是ControllerBase。如果有其它的封装，则规则可能不同，但思路相同</p><p>经过筛选后的Type就是Controller了，然后使用GetMethods方法，可以得到所有的方法，Action是Controller中特殊的方法，因为也要对获取到的所有方法进行过滤</p><p>过滤Action的方式也有很多，可以考虑通过返回值类型来判断，也可以通过特性来判断</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// 通过方法的返回值类型判断</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> newMethods <span class="token operator">=</span> methods<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span></span>
<span class="line">    p<span class="token punctuation">.</span>ReturnType<span class="token punctuation">.</span>FullName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>ReturnType<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;ActionResult&quot;</span> <span class="token operator">||</span></span>
<span class="line">                                      p<span class="token punctuation">.</span>ReturnType<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;FileResult&quot;</span> <span class="token operator">||</span></span>
<span class="line">                                      p<span class="token punctuation">.</span>ReturnType<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;JsonResult&quot;</span> <span class="token operator">||</span></span>
<span class="line">                                      <span class="token punctuation">(</span>p<span class="token punctuation">.</span>ReturnType<span class="token punctuation">.</span>GenericTypeArguments<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>ReturnType<span class="token punctuation">.</span>GenericTypeArguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;JsonResult&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                                      p<span class="token punctuation">.</span>ReturnType<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;IActionResult&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// 通过特性的方式判断是不是Action</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> httpMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;HttpGetAttribute&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;HttpPostAttribute&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;HttpPutAttribute&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;HttpDeleteAttribute&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> newMethods <span class="token operator">=</span> methods<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span></span>
<span class="line">    p<span class="token punctuation">.</span>CustomAttributes<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>AttributeType<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Intersect</span><span class="token punctuation">(</span>httpMethods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/AspNetCore/ExperienceSharing/GetControllerAndActionByAssembly.html","title":"通过Assembly程序集获取所有Controller和Action","lang":"zh-CN","frontmatter":{"title":"通过Assembly程序集获取所有Controller和Action"},"headers":[],"git":{"updatedTime":1719975461000,"contributors":[{"name":"吴俊城","email":"wujunchngman@163.com","commits":1}]},"filePathRelative":"AspNetCore/ExperienceSharing/GetControllerAndActionByAssembly.md"}');export{i as comp,u as data};
