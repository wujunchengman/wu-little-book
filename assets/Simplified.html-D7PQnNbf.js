import{_ as a,c as s,a as t,o as p}from"./app-Bah7_sEf.js";const e={};function o(l,n){return p(),s("div",null,n[0]||(n[0]=[t(`<h1 id="springboot对开发的一些简化" tabindex="-1"><a class="header-anchor" href="#springboot对开发的一些简化"><span>SpringBoot对开发的一些简化</span></a></h1><p>SpringBoot的核心就是针对Spring开发非常复杂的问题而进行的一个简化，下面简单的看看SpringBoot是怎么做简化的</p><h2 id="起步依赖" tabindex="-1"><a class="header-anchor" href="#起步依赖"><span>起步依赖</span></a></h2><p>SpringBoot提供了众多常用Java包的版本定义，当使用一个已经定义好的项目时，仅需提供GAV（groupId、artifactId、version）中GA，而对应的项目的版本由SpringBoot同意提供，极大程度上避免了因依赖包版本冲突引发的问题</p><h3 id="parent" tabindex="-1"><a class="header-anchor" href="#parent"><span>parent</span></a></h3><p>SpringBoot项目通过parent继承了<code>spring-boot-dependencies</code>，而在<code>spring-boot-denpencies</code>中通过<code>properties</code>定义了常用软件的版本，通过<code>dependencyManagement</code>定义了一系列坐标依赖管理，因此在项目中需要使用对应的依赖包时，仅需要提供对应的GA就可以了，无需再去匹配对应的版本信息、排除依赖冲突等操作</p><h3 id="starter" tabindex="-1"><a class="header-anchor" href="#starter"><span>starter</span></a></h3><p>SpringBoot项目大量使用了starter依赖包，starter是满足某种功能需要的一组依赖包集合。仅需在使用时添加所需功能对应的starter依赖，通过依赖传递的方式将所需的依赖包全部导入，简化了对依赖包的配置</p><h3 id="parent和starter" tabindex="-1"><a class="header-anchor" href="#parent和starter"><span>parent和starter</span></a></h3><p>starter定义了功能所需要的依赖包集合，使其在添加对应功能时仅需添加对应的starter一个依赖，而不是所需要的一堆依赖，达到<strong>减少依赖项配置</strong>的目的</p><p>parent定义来常用依赖包的版本，由SpringBoot管理各依赖之间的版本，达到<strong>减少依赖冲突</strong>的目的</p><h2 id="自动配置" tabindex="-1"><a class="header-anchor" href="#自动配置"><span>自动配置</span></a></h2><h3 id="引导类" tabindex="-1"><a class="header-anchor" href="#引导类"><span>引导类</span></a></h3><p>SpringBoot项目创建完成后，以Application结尾，带有<code>@SpringBootApplication</code>注解的类就是引导类</p><p>引导类中包含了main方法，它是程序的入口，在main方法中，执行了<code>SpringApplication.run()</code>方法，并将引导类和启动参数传递给了run方法</p><p>run方法会创建并移动一个容器，默认建立的项目没有用变量接收run方法的返回值，但是run方法是有返回值的，run方法运行后的返回值是一个ConfigurableApplicationContext对象，这是一个可配置应用上下文对象，它就是一个Spring容器。</p><p>可以通过getBean()方法获得到对应的Bean，获取Bean有四种方法，</p><p>引导类的<code>@SpringBootApplication</code>注解定义类配置累和Bean扫描，在未指定包路径的情况下，会扫描引导类当前包及其子包，因此可以无需手动注册Bean，前面HelloWorld创建的Controller就可以直接访问</p><p>通过引导类，使得原本要配置很多东西才能启动的Spring直接可以运行，这是一种通过约定完成配置的思想，简化了启动SpringBoot项目所需的工作，使开发从一堆没有意义的配置中脱离出来，更好的关注真正的业务价值</p><h2 id="内嵌服务器" tabindex="-1"><a class="header-anchor" href="#内嵌服务器"><span>内嵌服务器</span></a></h2><p>在学校学习Java Web开发的时候，老师讲配置Tomcat要讲四节课，整整一上午，到最后还是很多同学没有配置成功。Java的配置真的很多很烦很容易出错</p><p>SpringBoot在项目中集成了Tomcat，Tomcat的运行、终止全生命周期由SpringBoot来接管，这样就避免了各种麻烦的配置</p><p>因为默认用的Tomcat，有时候有些项目不想使用Tomcat，而是想用其他的Web服务器，可以通过排除依赖的方式移除Tomcat，然后添加想要的Web服务器依赖即可</p><p>tomcat的在<code>spring-boot-starter-web</code>中引入，如果不需要tomcat，可以使用下面的方式替换为其他Web服务器</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过排除tomcat然后重新引入jetty依赖的方式，替换了SpringBoot的Web服务器</p><p>SpringBoot默认支持三款Web服务器：tomcat、jetty、undertom，其中tomcat是项目默认继承的，如果没有啥特别需求，或者明确了解三款Web服务器各自功能特点的情况下，使用默认的即可</p>`,27)]))}const i=a(e,[["render",o]]),r=JSON.parse('{"path":"/Java/SpringBoot/Simplified.html","title":"SpringBoot对开发的一些简化","lang":"zh-CN","frontmatter":{"title":"SpringBoot对开发的一些简化"},"headers":[{"level":2,"title":"起步依赖","slug":"起步依赖","link":"#起步依赖","children":[{"level":3,"title":"parent","slug":"parent","link":"#parent","children":[]},{"level":3,"title":"starter","slug":"starter","link":"#starter","children":[]},{"level":3,"title":"parent和starter","slug":"parent和starter","link":"#parent和starter","children":[]}]},{"level":2,"title":"自动配置","slug":"自动配置","link":"#自动配置","children":[{"level":3,"title":"引导类","slug":"引导类","link":"#引导类","children":[]}]},{"level":2,"title":"内嵌服务器","slug":"内嵌服务器","link":"#内嵌服务器","children":[]}],"git":{"updatedTime":1664106972000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Java/SpringBoot/Simplified.md"}');export{i as comp,r as data};
