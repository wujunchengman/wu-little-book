import{_ as p,c as l,a as e,b as a,e as n,d as o,w as i,r as c,o as r}from"./app-Bah7_sEf.js";const u={};function d(k,s){const t=c("RouteLink");return r(),l("div",null,[s[7]||(s[7]=e(`<h1 id="消息处理" tabindex="-1"><a class="header-anchor" href="#消息处理"><span>消息处理</span></a></h1><p>消息处理有两种方式，一种通过订阅，一种通过直接在服务端处理。如果通过订阅，那么大概率不需要自己写服务端了，因为有很多做得很好的开源MQTT Server，比如EMQX。通过订阅的方式有一个巨大的缺点：订阅的客户端出了异常挂掉了真实设备是不知道的。当订阅接收程序出现异常（涉及到业务总是有可能出异常），设备是不知道的，MQTT Server也是正常的，这时候设备发送上来的数据就因为接收端没有丢失了。因此这里主要介绍的是通过服务器直接处理</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">UseMqttServer</span><span class="token punctuation">(</span>server <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    server<span class="token punctuation">.</span>InterceptingPublishAsync <span class="token operator">+=</span> messageHandle<span class="token punctuation">.</span>MessageProcess<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),a("p",null,[s[1]||(s[1]=n("上面写到了使用MQTTnet创建一个服务端，这里还是接")),o(t,{to:"/Projects/IotPlatform/a-little-mqtt-server.html"},{default:i(()=>s[0]||(s[0]=[n("上文")])),_:1}),s[2]||(s[2]=n("，通过")),s[3]||(s[3]=a("code",null,"UseMqttServer",-1)),s[4]||(s[4]=n("扩展方法，给")),s[5]||(s[5]=a("code",null,"InterceptingPublishAsync",-1)),s[6]||(s[6]=n("委托注册一个处理方法，当客户端发送消息时就会调用这个方法。"))]),s[8]||(s[8]=e(`<p><code>InterceptingPublishEventArgs</code>接收一个<code>InterceptingPublishEventArgs</code>参数，通过这个参数可以获取到消息的内容，ClientId等一些列参数</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageHandle</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">MessageProcess</span><span class="token punctuation">(</span><span class="token class-name">InterceptingPublishEventArgs</span> args<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> clientId <span class="token operator">=</span> args<span class="token punctuation">.</span>ClientId<span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> args<span class="token punctuation">.</span>ApplicationMessage<span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> topic <span class="token operator">=</span> args<span class="token punctuation">.</span>ApplicationMessage<span class="token punctuation">.</span>Topic<span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> payload <span class="token operator">=</span> args<span class="token punctuation">.</span>ApplicationMessage<span class="token punctuation">.</span>PayloadSegment<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析获取到的消息，可以进行各种业务操作。这种方式的好处就是，如果消息处理挂了，会连带整个Server都挂掉，这样设备就能清楚的知道Server已经没了，数据已经无法接收了，需要把数据先保存起来等到Server恢复了再发送。</p><p>EMQX直接在服务端保存数据需要购买企业版，如果业务不大不复杂，不需要那么多的高可用，自己起一个MQTT Server也是不错的选择。上文提到的通过订阅的方式处理也可以通过明确的回复来解决这个问题，设备的每一条消息都有对应的一条消息进行确认，只是这样的话开销就很高了，得不偿失。对一些不是很重要的数据，允许轻微丢失数据的场景，用这种方式是可以接受的，毕竟要更简单一些</p>`,4))])}const v=p(u,[["render",d]]),g=JSON.parse('{"path":"/Projects/IotPlatform/message-process.html","title":"消息处理","lang":"zh-CN","frontmatter":{"title":"消息处理"},"headers":[],"git":{"updatedTime":1718074014000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Projects/IotPlatform/message-process.md"}');export{v as comp,g as data};
