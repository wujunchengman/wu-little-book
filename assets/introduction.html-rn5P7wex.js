import{_ as e,c as a,b as t,o as l}from"./app-Bah7_sEf.js";const o={};function r(i,n){return l(),a("div",null,n[0]||(n[0]=[t("h1",{id:"前言",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#前言"},[t("span",null,"前言")])],-1),t("p",null,"本来我想将C#部分写成简单易懂的，0基础的内容，包括什么叫变量什么叫方法的都讲一讲，但是构思了很久，觉得自己的理解不够，于是便先把需要掌握的内容写了再说，待以后理解深了，再来解释这些基础的东西。如果您从未学习过编程，对编程的基本概念从未听说过，或者一知半解，我推荐您去读一遍《Python编程导论（第2版）》，在我写这篇文章的时候它是第二版，也许您看的时候有了新版。这本书的核心是讲解什么是编程，编程的核心，至于Python只是用来描述的载体，您看完这本书必定可以了解到什么是编程。当您看完这本书，无论是学C#，或者是Java什么的，都会事半功倍了。",-1),t("p",null,"后面的只是我发的牢骚，您可以跳到下一部分去了。这篇文章的内容已经写完了。",-1),t("hr",null,null,-1),t("p",null,"本想写写我为什么接触编程，但是写完我又删了，因为这不重要。",-1),t("p",null,"正经写写，每个人接触编程的原因可能都不相同，只要我们一起努力就好了。学编程这事儿，不能急躁，这就是个手艺活，讲究精细，这其中也有很多门道，得靠经验堆，很多前辈留下来的训诫，也不全是废话。日新月异的新框架，一波一波的概念投资，其实很多东西都是一样的。在我认为，写程序的，和木匠没多少区别，程序也是会坏的，会有生命周期的，随着需求的变更程序就这么慢慢老化了，毁灭了，除非一直翻新下去。绝大多数程序员都在不停的重复，不停的锯一样的板子，这是社会的需要，没什么可自卑的。",-1),t("p",null,"编程的东西，一开始有很多不明白的，这不重要，当你学的时候理解不了是正常的，就当这是古训，记着，当经验到了，也就慢慢能理解了。古训也不全是对的，因此很多编程的概念也不全是对的，也许是传播时除了错误，也许是当时的认知还没到。古训也不一定是最好的，也许一个东西经过某位大神的设计，有了新的生产流程，编程的知识也不是学会了就一直可用的，会随着新技术、新思想的出现，让产出变得越来越容易，但是有时候也不必过分追新，有时候有的新东西并未经过时间的检验，也许埋着什么坑；但是也不能永远停步不前，编程跟木匠有着极大的相似性，如果不更新思想与流程，还是一样可以做出东西来的，“又不是不能用”是很多程序员逃避的口头禅，落后的生产力总会被淘汰的，师夷长技以制夷，多学习才能保持活性，不可学大清。",-1)]))}const s=e(o,[["render",r]]),u=JSON.parse('{"path":"/CSharp/introduction.html","title":"前言","lang":"zh-CN","frontmatter":{"title":"前言","description":"编程之前了解编程在干什么"},"headers":[],"git":{"updatedTime":1658831819000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"CSharp/introduction.md"}');export{s as comp,u as data};
