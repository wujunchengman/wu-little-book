import{_ as s,c as a,a as e,o as p}from"./app-Bah7_sEf.js";const t={};function i(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p>结构体和我们在“元组类型”部分论过的元组类似，它们都包含多个相关的值。和元组一样，结构体的每一部分可以是不同类型。但不同于元组，结构体需要命名各部分数据以便能清楚的表明其值的意义。由于有了这些名字，结构体比元组更灵活：不需要依赖顺序来指定或访问实例中的值。</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    sign_in_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体赋值" tabindex="-1"><a class="header-anchor" href="#结构体赋值"><span>结构体赋值</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">build_user</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        username<span class="token punctuation">:</span> username<span class="token punctuation">,</span></span>
<span class="line">        email<span class="token punctuation">:</span> email<span class="token punctuation">,</span></span>
<span class="line">        sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简化赋值" tabindex="-1"><a class="header-anchor" href="#简化赋值"><span>简化赋值</span></a></h3><p>Rust在给结构体赋值时可以简化，行为与JavaScript类似</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">build_user</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        username<span class="token punctuation">,</span></span>
<span class="line">        email<span class="token punctuation">,</span></span>
<span class="line">        sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当参数与结构体的字段同名时，可以简化写法</p><h3 id="从其他实例创建实例" tabindex="-1"><a class="header-anchor" href="#从其他实例创建实例"><span>从其他实例创建实例</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// --snip--</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> user2 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;another@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">..</span>user1</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要从一个实例创建另一个实例时，除了常规的每个字段都进行赋值，还可以选择这种结构体更新语法，近指定需要变化的字段，然后解构原来的结构体（与JavaScript中的解构赋值类似）</p><h3 id="特殊的结构体" tabindex="-1"><a class="header-anchor" href="#特殊的结构体"><span>特殊的结构体</span></a></h3><h5 id="元组结构体" tabindex="-1"><a class="header-anchor" href="#元组结构体"><span>元组结构体</span></a></h5><p>元组结构体有着结构体名称提供的含义，但没有具体的字段名，只有字段的类型。</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Color</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是元组，那么同样的三个整数是没有区分的，但是元组结构体能够表明这里是RGB颜色，还是XYZ坐标</p><h5 id="类单元结构体" tabindex="-1"><a class="header-anchor" href="#类单元结构体"><span>类单元结构体</span></a></h5><p>一个没有任何字段的结构体，它们被称为 类单元结构体（unit-like structs）因为它们类似于 ()</p><p>类单元结构体常常在你想要在某个类型上实现 trait 但不需要在类型中存储数据的时候发挥作用。</p>`,19)]))}const o=s(t,[["render",i]]),u=JSON.parse('{"path":"/Rust/Struct.html","title":"结构体","lang":"zh-CN","frontmatter":{"title":"结构体"},"headers":[{"level":3,"title":"结构体赋值","slug":"结构体赋值","link":"#结构体赋值","children":[]},{"level":3,"title":"简化赋值","slug":"简化赋值","link":"#简化赋值","children":[]},{"level":3,"title":"从其他实例创建实例","slug":"从其他实例创建实例","link":"#从其他实例创建实例","children":[]},{"level":3,"title":"特殊的结构体","slug":"特殊的结构体","link":"#特殊的结构体","children":[]}],"git":{"updatedTime":1730017376000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Rust/Struct.md"}');export{o as comp,u as data};
