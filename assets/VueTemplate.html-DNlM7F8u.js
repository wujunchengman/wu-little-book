import{_ as s,c as a,a as t,o as e}from"./app-Bah7_sEf.js";const p={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="vue中的模板" tabindex="-1"><a class="header-anchor" href="#vue中的模板"><span>Vue中的模板</span></a></h1><p>Vue使用了template、style、script来定义一个组件，非常类似与原始和Html网页，因此从最开始的原始的Html操作DOM过度到Vue并不费事，也没有多少心智负担</p><p>template标签中依然使用Html代码，只是添加了许多的Vue指令的支持，Vue会根据对应的指令，从script和style中绑定对应的变量、计算显示的样式、对DOM进行操作……。这都是由Vue去自动完成的，并且Vue还会对操作进行优化，以尽量减少Dom操作的次数，提升速度</p><h2 id="一个简单的vue组件例子" tabindex="-1"><a class="header-anchor" href="#一个简单的vue组件例子"><span>一个简单的Vue组件例子</span></a></h2><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Count is: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"></span>
<span class="line"><span class="token selector">button</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 72px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border</span><span class="token punctuation">:</span> 1px red solid<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是前面的Vue单文件组件的例子，在这里面定义了<code>template</code>，<code>template</code>中定义了一个button，button绑定了click事件和button的文本内容，文本内容使用双大括号绑定了script中声明的响应式变量count；click事件则是每次点击都给count的值+1</p><p>如果不使用Vue，就需要绑定Button的Click事件，然后在Click事件处理函数中去更改变量，然后又根据变量的值去改变DOM，使用Vue，只需要改变变量的值就行了，Vue会帮你处理好变量的值与页面的显示的</p><h2 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法"><span>模板语法</span></a></h2>`,8)]))}const o=s(p,[["render",l]]),u=JSON.parse('{"path":"/Vue/Basic/VueTemplate.html","title":"模板","lang":"zh-CN","frontmatter":{"title":"模板"},"headers":[{"level":2,"title":"一个简单的Vue组件例子","slug":"一个简单的vue组件例子","link":"#一个简单的vue组件例子","children":[]},{"level":2,"title":"模板语法","slug":"模板语法","link":"#模板语法","children":[]}],"git":{"updatedTime":1696922216000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Vue/Basic/VueTemplate.md"}');export{o as comp,u as data};
