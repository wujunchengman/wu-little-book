import{_ as s,c as a,a as t,o as e}from"./app-Bah7_sEf.js";const p="/assets/NeedLoginRedirect-Bj4XTjgv.png",i="/assets/LoginSuccess-CfgxC6Mx.png",c="/assets/NeedLogin-B9LYvw5o.png",l={};function o(u,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="一个最简单的认证示例" tabindex="-1"><a class="header-anchor" href="#一个最简单的认证示例"><span>一个最简单的认证示例</span></a></h1><p>上文讲了认证和授权的区别，可以感觉到授权是在认证之上的，必须先经过认证才会有授权（如果进不了站，也就检不了票），因此从认证的开始，先简单介绍一下认证的过程</p><p>首先创建一个Asp.Net Core MVC项目</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">dotnet new mvc <span class="token parameter variable">-n</span> HelloAuthentication</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建好后添加对应的认证中间件和认证方案，Asp.Net Core将认证和授权分开后可以更方便的支持多种认证方案，这里考虑到HelloWorld应该更简单，所以选择了默认实现了的、配置较少的Cookie方案</p><p>在Program.cs文件中添加认证中间件和配置认证方案</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>Cookies</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add services to the container.</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllersWithViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token comment">// CookieAuthenticationDefaults.AuthenticationScheme值为Cookies，</span></span>
<span class="line highlighted"><span class="token comment">// AddAuthentication()中的字符串名字代表了默认要使用的认证方案</span></span>
<span class="line highlighted"><span class="token comment">// 这里是指定默认的认证方式为Cookies</span></span>
<span class="line highlighted">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token comment">// 添加Cookie认证方式，这里AddCookie()提供了两个参数，第一个参数指定了身份验证方案名</span></span>
<span class="line highlighted">    <span class="token comment">// 第二个参数是一个Action委托，用于指定认证行为</span></span>
<span class="line highlighted">    <span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> options <span class="token operator">=&gt;</span></span>
<span class="line highlighted">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token comment">// 如果没有认证跳转到的登陆地址</span></span>
<span class="line highlighted">        options<span class="token punctuation">.</span>LoginPath <span class="token operator">=</span> <span class="token string">&quot;/Account/Login&quot;</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token comment">// 拒绝访问时跳转到的地址</span></span>
<span class="line highlighted">        options<span class="token punctuation">.</span>AccessDeniedPath <span class="token operator">=</span> <span class="token string">&quot;/forbid&quot;</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        </span>
<span class="line highlighted">        <span class="token comment">// 还有很多其他配置选项</span></span>
<span class="line highlighted">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Configure the HTTP request pipeline.</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/Home/Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">UseHsts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token comment">// 认证中间件</span></span>
<span class="line highlighted">app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapControllerRoute</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">pattern</span><span class="token punctuation">:</span> <span class="token string">&quot;{controller=Home}/{action=Index}/{id?}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置好认证和授权中间件之后，添加一个需要认证才能访问的资源，在添加需要认证的资源之前，先添加用于登录和退出的Controller，我这里添加的AccountController，也可以用其他的名字，在MVC中Controller的名字会映射为路由地址，如果用其他名字记得变更后面测试时的URL地址即可</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Content</span><span class="token punctuation">(</span><span class="token string">&quot;等待登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">LoginTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 身份信息，会被解析到HttpContext.User中</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//这里方案的ClaimsIdentity的构造函数的参数要和下面的SignInAsync的方案名一致</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> claimIdentity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        claimIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 将身份信息编码后写入Cookie</span></span>
<span class="line">        <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignInAsync</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>claimIdentity<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 凭据过期时间</span></span>
<span class="line">                ExpiresUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Content</span><span class="token punctuation">(</span><span class="token string">&quot;登陆成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">LoginAdminTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 身份信息，会被解析到HttpContext.User中</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//这里方案的ClaimsIdentity的构造函数的参数要和下面的SignInAsync的方案名一致</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> claimIdentity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        claimIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> <span class="token string">&quot;Admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 将身份信息编码后写入Cookie</span></span>
<span class="line">        <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignInAsync</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>claimIdentity<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 凭据过期时间</span></span>
<span class="line">                ExpiresUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Content</span><span class="token punctuation">(</span><span class="token string">&quot;登陆成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignOutAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Content</span><span class="token punctuation">(</span><span class="token string">&quot;退出登录成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里添加了四个Action，分别是Login、LoginTest、LoginAdmin、Logout。Login用来演示未认证访问需要认证的资源时的重定向效果；LoginTest执行普通用户登录，这里为了方便就不写View用Post登录了，只是简单的演示效果；LoginAdmin执行Admin角色用户登录；Loginout执行退出登录</p><p>添加完跟账户有关的Action之后再添加需要认证才能访问的资源</p><p>在项目模板中的<strong>HomeController</strong>中添加需要认证才能访问的Action</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">NeedLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">Content</span><span class="token punctuation">(</span><span class="token string">&quot;必须要登陆了才能看到的内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个Action与公开的Action一样，但是使用了<code>Authorize</code>特性标注，Asp.Net Core如果检查到了Authorize特性，在用户访问时，就会检查用户是否经过了认证，如果用户没有经过认证，则会重定向到前面在Program中配置的LoginPath路由，并带上重定向地址，在登陆成功后重定向回当前地址</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">https://localhost:7238/home/needlogin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>以前Asp.Net Core新建的项目端口默认是5000和5001，现在好像是随机的，在自己测试时，请根据自己的端口修改URL</p></div><p>当未登录的时候，访问需要认证的资源NeedLogin，会自动重定向到上面配置的Login地址，后面会更上</p><p><img src="`+p+`" alt="未认证访问需要认证资源"></p><p>页面自动跳转到了配置的登录地址/Account/Login，并携带了原来的访问的URL作为ReturnUrl参数，当登录（经过认证）成功，就可以根据ReturnUrl参数的值进行重定向，跳转回原来的页面</p><p>接下来将这个等待登录的URL地址中的Login变更为LoginTest，因为LoginTest包含了写入Cookie身份信息（使用Cookie认证）的方法，访问LoginTest就会登录成功</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">https://localhost:7238/Account/LoginTest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+i+`" alt="登录成功"></p><p>接下来再访问NeedLogin资源</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">https://localhost:7238/home/needlogin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>就可以正常访问到对应的资源了</p><p><img src="`+c+'" alt="正常访问的NeedLogin"></p><p>在这个例子中，使用的是以Cookie作为认证手段，同时Asp.Net Core也是支持其他方案的，也可以自定义认证方案，就像进火车站除了身份证，还可以用护照、户口本、行驶证之类的证件，这个就根据自己的需要自行选择，Cookie是最简单方便的一种，所以就以Cookie进行演示</p><p>认证之后，多久需要重新认证呢？根据Program里面的配置，如果三十分钟没有操作，Cookie就会失效。除了自然失效，关闭浏览器和调用Logout退出登录都会收回认证，收回认证后便不能再访问了，如果需要再次访问则需要再次进行登录</p><p>在上面的AccountController中的Login和Logout Action中，使用了SignIn和SignOut两个API，它们是用于认证的抽象接口，在Program中配置为Cookie方案时，Asp.Net Core内置的Cookie方案程序实现了这两个API，它们将身份信息进行编/解码，写入/读取Cookie值，以此将认证的结果保存下来。但是并不是所有的方案都实现了这两个API，比如JWT方案中就没有实现这两个API，因为JWT并没有撤销的概念，因此不需要SignIn和SignOut（这一段权当废话，如果才接触不知道什么是JWT可以不用管）</p><p>至此，一个简单的认证HelloWorld就写完了，这个案例中配置了认证方案，使用Authorize特性保护了NeedLogin资源，使其必须要经过认证的用户才能访问</p>',30)]))}const r=s(l,[["render",o]]),k=JSON.parse('{"path":"/AspNetCore/Authorization/HelloAuthentication.html","title":"一个最简单的认证示例","lang":"zh-CN","frontmatter":{"title":"一个最简单的认证示例"},"headers":[],"git":{"updatedTime":1667225840000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"AspNetCore/Authorization/HelloAuthentication.md"}');export{r as comp,k as data};
