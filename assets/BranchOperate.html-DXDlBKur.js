import{_ as s,c as e,a as n,o as t}from"./app-Bah7_sEf.js";const i={};function l(r,a){return t(),e("div",null,a[0]||(a[0]=[n(`<h1 id="git分支操作" tabindex="-1"><a class="header-anchor" href="#git分支操作"><span>Git分支操作</span></a></h1><h2 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支"><span>创建分支</span></a></h2><p>创建新的Git分支可以使用以下命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建一个新分支，默认是从当前的位置创建，也就是新分支指向的当前分支的最后一个提交，如果需要从指定位置创建一个分支，可以指定一个提交记录hash值，这样新分支就是从指定位置创建的了</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>SHA<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支"><span>切换分支</span></a></h2><p>切换分支</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="创建与切换合并操作" tabindex="-1"><a class="header-anchor" href="#创建与切换合并操作"><span>创建与切换合并操作</span></a></h2><p>大多数时候创建分支之后紧接着就是切换到创建的分支，因此Git提供了一步到位的操作</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它相当于下面两条命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支"><span>合并分支</span></a></h2><p>合并分支首先需要切换到接收合并的分支上（一般是主分支），然后运行下面的命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> merge <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里指定的分支名是被合并的分支名，通过这条命令，被合并分支的提交就会合并到当前分支上</p><p>有些时候，我们倾向于一个提交包含一个完整的功能，但是这个功能可能一次完成不了，考虑代码安全性之类的，可能会在下半时以某个比较随意的名字提交，在最后的时候合并为一个提交，这时候就会用到squash</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> merge <span class="token parameter variable">--squash</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行上述命令，会将&lt;branch_name&gt;中的更改全部应用到当前分支来，此时便可以以最终决定的提交信息进行提交，得到干净的一个完整的提交，不至于提交记录凌乱重复</p>`,21)]))}const c=s(i,[["render",l]]),d=JSON.parse('{"path":"/Infrastructure/Git/BranchOperate.html","title":"Git分支操作","lang":"zh-CN","frontmatter":{"title":"Git分支操作"},"headers":[{"level":2,"title":"创建分支","slug":"创建分支","link":"#创建分支","children":[]},{"level":2,"title":"切换分支","slug":"切换分支","link":"#切换分支","children":[]},{"level":2,"title":"创建与切换合并操作","slug":"创建与切换合并操作","link":"#创建与切换合并操作","children":[]},{"level":2,"title":"合并分支","slug":"合并分支","link":"#合并分支","children":[]}],"git":{"updatedTime":1716691431000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Infrastructure/Git/BranchOperate.md"}');export{c as comp,d as data};
