import{_ as n,c as a,a as e,o as p}from"./app-Bah7_sEf.js";const l={};function t(i,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="rust中的变量" tabindex="-1"><a class="header-anchor" href="#rust中的变量"><span>Rust中的变量</span></a></h1><p>在其他的编程语言中，有可变变量、常量、不可变变量，比如说在C#中，不加修饰符定义的变量是可变变量，使用readonly修饰的变量是不可变变量，使用const修饰的是常量，在Rust中也有对应的可变变量、不可变变量、常量</p><h3 id="c-中常量和变量-常见的面向对象语言中的常量和变量" tabindex="-1"><a class="header-anchor" href="#c-中常量和变量-常见的面向对象语言中的常量和变量"><span>C#中常量和变量（常见的面向对象语言中的常量和变量）</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">// readonly字段可以在构造函数和字段声明初始化，可用于运行时常量</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 后面使用timeStamp时不可再改变它的值，但是在首次初始化时可以提供一个变量</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">uint</span></span> timeStamp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token punctuation">)</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Ticks<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// const只能在声明是初始化值，是编译时常量，因为编译时程序无法确定变量的值，因此为常量初始化时只能使用常量，或者常量表达式，必须是在编译期就能确定的值</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> C <span class="token operator">=</span> <span class="token number">707</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 可以使用常量表达式赋初值</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> D <span class="token operator">=</span> C <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rust中的常量、可变变量和不可变变量" tabindex="-1"><a class="header-anchor" href="#rust中的常量、可变变量和不可变变量"><span>Rust中的常量、可变变量和不可变变量</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">// 如果不加修饰，定义的是不可变变量</span></span>
<span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用mut修饰，定义的是可变变量</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 使用mut修饰的是可变变量，可以重新赋值</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用const声明常量，必须指定数据类型，Rust 对常量的命名约定是在单词之间使用全大写加下划线</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">THREE_HOURS_IN_SECONDS</span><span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="隐藏" tabindex="-1"><a class="header-anchor" href="#隐藏"><span>隐藏</span></a></h5><p>在上面的代码中，有一个寻常面向对象语言不允许的操作：同一作用域使用隐藏</p><p>在C#中，在同一作用域中，不能声明相同名称的变量（在不同作用域中可以，也可以在内层作用域声明相同名称的变量隐藏外层作用域的变量），而Rust允许在相同层级隐藏，正如上面的代码中声明了两次<code>x</code>。当然，在不同层级也可以声明相同名称变量来隐藏之前的声明，效果与常见的面向对象语言效果相同</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// x 的值为12</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x in the inner scope is: {x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 脱离之前的作用域后隐藏的x重新可以获取了，此时x为6</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is: {x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)]))}const o=n(l,[["render",t]]),r=JSON.parse('{"path":"/Rust/variables.html","title":"Rust中的变量","lang":"zh-CN","frontmatter":{"title":"Rust中的变量"},"headers":[{"level":3,"title":"C#中常量和变量（常见的面向对象语言中的常量和变量）","slug":"c-中常量和变量-常见的面向对象语言中的常量和变量","link":"#c-中常量和变量-常见的面向对象语言中的常量和变量","children":[]},{"level":3,"title":"Rust中的常量、可变变量和不可变变量","slug":"rust中的常量、可变变量和不可变变量","link":"#rust中的常量、可变变量和不可变变量","children":[]}],"git":{"updatedTime":1740270918000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":2}]},"filePathRelative":"Rust/variables.md"}');export{o as comp,r as data};
