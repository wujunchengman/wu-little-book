import{_ as a,c as s,a as t,o}from"./app-Bah7_sEf.js";const e={};function p(c,n){return o(),s("div",null,n[0]||(n[0]=[t(`<h1 id="创建一个视图" tabindex="-1"><a class="header-anchor" href="#创建一个视图"><span>创建一个视图</span></a></h1><p>创建一个视图展示TODO列表和一个添加Todo项的Button按钮</p><p>通过VS创建，在Views目录下右键添加-&gt;新建项，Avalonia中的User Control，命名为TodoListView（非强制，只是为了更好的复制示例代码）</p><p>也可以通过CLI进行创建</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">dotnet new avalonia<span class="token punctuation">.</span>usercontrol <span class="token operator">-</span>o Views <span class="token operator">-</span>n TodoListView  <span class="token operator">--</span>namespace Todo<span class="token punctuation">.</span>Views</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建的TodoListView在Views目录下，和MainWindow.axaml在一个目录下，同时还有一个TodoListView.axaml.cs文件(<code>*.axaml</code>和<code>*.axaml.cs</code>构成一个视图文件)，在VS中这两个文件会折叠到一起，展开就能看到</p><p>目前先不涉及cs代码，可以直接先把数据写死在界面（axaml文件）中，看看效果</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserControl</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://github.com/avaloniaui<span class="token punctuation">&quot;</span></span></span>
<span class="line">             <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">&quot;</span></span></span>
<span class="line">             <span class="token attr-name"><span class="token namespace">xmlns:</span>d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.microsoft.com/expression/blend/2008<span class="token punctuation">&quot;</span></span></span>
<span class="line">             <span class="token attr-name"><span class="token namespace">xmlns:</span>mc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.openxmlformats.org/markup-compatibility/2006<span class="token punctuation">&quot;</span></span></span>
<span class="line">             <span class="token attr-name"><span class="token namespace">mc:</span>Ignorable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>d<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">d:</span>DesignWidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">d:</span>DesignHeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>400<span class="token punctuation">&quot;</span></span></span>
<span class="line">             <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Todo.Views.TodoListView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DockPanel</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">DockPanel.Dock</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Bottom<span class="token punctuation">&quot;</span></span></span>
<span class="line">            <span class="token attr-name">HorizontalAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        Add an item</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Walk the dog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CheckBox</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Buy some milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CheckBox</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DockPanel</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserControl</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意命名空间和类名（x:Class），如果没有采用上面提到的项目名和视图名，需要改成自己的对应的类名（命名空间也要对应上）</p><p>简单看一下这个axaml文件，首先根节点是UserControl，其中包含了许多xml的名称空间，也就是xmlns(XML namespace)，最重要的是第一行的avalonia，它声明这个XAML文件中包含Avalonia XAML；没有这个命名空间则不会解析为界面</p><p>命名空间<code>xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</code>用来导入非Avalonia特定的XAML功能，后面会使用到它</p><p><code>mc:Ignorable=&quot;d&quot; d:DesignWidth=&quot;200&quot; d:DesignHeight=&quot;400&quot;</code>用于指定特定于设计器的信息，前面的<code>mc:Ignorable=&quot;d&quot;</code>告诉XAML引擎忽略以<code>d:</code>开头的项目，因此后面的<code>d:DesignWidth=&quot;200&quot; d:DesignHeight=&quot;400&quot;</code>都不会被XAML引擎解析，但是设计器会使用这两个参数，它们决定了设计器显示的宽度和高度</p><p><code>x:Class=&quot;Todo.Views.TodoListView&quot;</code>决定了从哪里查找对应的class文件，它是类的完全限定名称，前面的<code>x:</code>则是第二行的<code>xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</code>指定的，x就代表了这个命名空间</p><p>以上便是<code>UserControl</code>的信息，<code>UserControl</code>的子项，就是具体的页面代码了</p><p>一个<code>UserControl</code>只能有一个子节点，因此需要使用面板节点（也可以叫容器节点），面板节点可以包含多个子节点</p><p><code>DockPanel</code>是一种面板，它在顶部、底部、左侧和右侧布置其控件，单个控件填充中间的剩余空间。</p><p><code>&lt;Button DockPanel.Dock=&quot;Bottom&quot; HorizontalAlignment=&quot;Center&quot;&gt;Add an item&lt;/Button&gt;</code>声明出现在视图底部的按钮。<code>DockPanel.Dock=&quot;Bottom&quot;</code>告诉DockPanel我们希望按钮出现在底部，<code>HorizontalAlignment=&quot;Center&quot;</code>告诉DockPanel这个按钮是居中对齐的。Button元素中间包裹的值会自动绑定到Content属性上，也就是说，也可以改写成<code>&lt;Button DockPanel.Dock=&quot;Bottom&quot; HorizontalAlignment=&quot;Center&quot; Content=&quot;Add an item&quot;&gt;&lt;/Button&gt;</code>这是等效的，并且，如果节点中间没有内容的话，还可以把节点改成自闭合节点，也就是<code>&lt;Button DockPanel.Dock=&quot;Bottom&quot; HorizontalAlignment=&quot;Center&quot; Content=&quot;Add an item&quot;&gt;&lt;/Button&gt;</code>，他们都是等效的，看个人喜好</p><p>Button节点下面是一个StackPanel节点，这也是一个面板节点，它会垂直平铺所有的子节点（可以通过设置<code>&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;</code>改为水平平铺，默认是垂直的）</p><p>StackPanel节点中有两个CheckBox节点<code>&lt;CheckBox Margin=&quot;4&quot;&gt;Walk the dog&lt;/CheckBox&gt;</code>，它们是选择框组件，会被渲染为选择框，Margin属性为组件设置边距，这里的设置值为4px，以避免选择框和程序的边框贴在一起，这样更好看一点</p><p>定义好TodoListView用户控件后，就要使用了</p><p>想要显示刚刚创建的TodoListView控件，它位于Todo.Views命名空间中，这里需要将Todo.Views命名空间映射到视图XML命名空间，编辑<code>MainWindow.axaml</code>，在Window节点添加命名空间<code>xmlns:views=&quot;clr-namespace:Todo.Views&quot;</code>。任何不是Avalonia核心控件的控件通常都需要这种类型的映射，以便XAML引擎找到控件。</p><p>然后编辑Window节点的子节点，添加<code>&lt;views:TodoListView/&gt;</code>，前面的views就是在Window引入的命名空间，TodoListView就是前面定义的控件，需要注意的是Window也只能有一个子节点，因此可能原来的模板中还有其他节点，需要删除，只保留一个子节点</p><p>还有最后一点，设计TodoListView组件的时候是宽高200 * 400，而MainWindow中模板默认的是800 * 450，可以考虑改成一致，这样更好看 <code>Width=&quot;200&quot; Height=&quot;400&quot;</code>(Width和DesignWidth是不同的，Width是实际宽度，DesignWidth是设计器宽度)</p><p>接下来运行即可看到效果了</p>`,24)]))}const i=a(e,[["render",p]]),u=JSON.parse('{"path":"/Avalonia/Todo/CreateAView.html","title":"创建一个视图","lang":"zh-CN","frontmatter":{"title":"创建一个视图"},"headers":[],"git":{"updatedTime":1669714394000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Avalonia/Todo/CreateAView.md"}');export{i as comp,u as data};
