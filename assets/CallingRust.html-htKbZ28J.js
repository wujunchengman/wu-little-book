import{_ as s,c as a,a as p,o as t}from"./app-Bah7_sEf.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="前端调用rust代码" tabindex="-1"><a class="header-anchor" href="#前端调用rust代码"><span>前端调用Rust代码</span></a></h1><p>Tauri提供了一个Command原语，用于访问具有类型安全性的Rust函数，还有一个更动态的事件系统。</p><h3 id="commands" tabindex="-1"><a class="header-anchor" href="#commands"><span>Commands</span></a></h3><p>Tauri提供了一个简单而强大的command系统，用于从Web应用程序调用Rust函数。命令可以接受参数并返回值。它们也可以返回错误并成为async。</p><h5 id="基本示例" tabindex="-1"><a class="header-anchor" href="#基本示例"><span>基本示例</span></a></h5><p>命令可以在src-tauri/src/lib.rs文件中定义。要创建一个command，只需添加一个函数并使用<code>#[tauri::command]</code>注释它：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[tauri::command]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">my_custom_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I was invoked from JavaScript!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：command名称必须唯一。</p><p>注意：定义的command不能使用pub标记，这是代码生成的限制，如果标记为pub则会报错</p><p>必须为构建器函数提供一个命令列表：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[cfg_attr(mobile, tauri::mobile_entry_point)]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token namespace">tauri<span class="token punctuation">::</span></span><span class="token class-name">Builder</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">invoke_handler</span><span class="token punctuation">(</span><span class="token namespace">tauri<span class="token punctuation">::</span></span><span class="token macro property">generate_handler!</span><span class="token punctuation">[</span>my_custom_command<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token namespace">tauri<span class="token punctuation">::</span></span><span class="token macro property">generate_context!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;error while running tauri application&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在就可以在JavaScript中调用Command了</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// When using the Tauri API npm package:</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> invoke <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tauri-apps/api/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// When using the Tauri global script (if not using the npm package)</span></span>
<span class="line"><span class="token comment">// Be sure to set \`app.withGlobalTauri\` in \`tauri.conf.json\` to true</span></span>
<span class="line"><span class="token keyword">const</span> invoke <span class="token operator">=</span> window<span class="token punctuation">.</span>__TAURI__<span class="token punctuation">.</span>core<span class="token punctuation">.</span>invoke<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Invoke the command</span></span>
<span class="line"><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;my_custom_command&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="在单独的模块中定义command" tabindex="-1"><a class="header-anchor" href="#在单独的模块中定义command"><span>在单独的模块中定义Command</span></a></h5><p>如果您的应用程序定义了许多组件，或者如果它们可以分组，则可以在单独的模块中定义command，而不是使lib.rs文件膨胀。</p><p>作为一个例子，让我们在src-tauri/src/commands.rs文件中定义一个command：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[tauri::command]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">my_custom_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I was invoked from JavaScript!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：当在单独的模块中定义command时，它们应该标记为pub。</p><p>注意：command的作用域不限于模块，因此即使在模块之间，它们也必须是唯一的。</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">commands</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[cfg_attr(mobile, tauri::mobile_entry_point)]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token namespace">tauri<span class="token punctuation">::</span></span><span class="token class-name">Builder</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">invoke_handler</span><span class="token punctuation">(</span><span class="token namespace">tauri<span class="token punctuation">::</span></span><span class="token macro property">generate_handler!</span><span class="token punctuation">[</span><span class="token namespace">commands<span class="token punctuation">::</span></span>my_custom_command<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token namespace">tauri<span class="token punctuation">::</span></span><span class="token macro property">generate_context!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;error while running tauri application&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意命令列表中的commands::前缀，它表示命令函数的完整路径。</p><p>这个例子中的命令名是<code>my_custom_command</code>，所以你仍然可以通过在前端执行<code>invoke(&quot;my_custom_command&quot;)</code>来调用它，<code>commands::</code>前缀被忽略。</p><h5 id="wasm" tabindex="-1"><a class="header-anchor" href="#wasm"><span>WASM</span></a></h5><p>当使用Rust前端不带参数地调用invoke()时，需要调整前端代码，如下所示。原因是Rust不支持可选参数。</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[wasm_bindgen]</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// invoke without arguments</span></span>
<span class="line">    #<span class="token punctuation">[</span><span class="token function">wasm_bindgen</span><span class="token punctuation">(</span>js_namespace <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;window&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;__TAURI__&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;core&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> js_name <span class="token operator">=</span> invoke<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">invoke_without_args</span><span class="token punctuation">(</span>cmd<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JsValue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// invoke with arguments (default)</span></span>
<span class="line">    #<span class="token punctuation">[</span><span class="token function">wasm_bindgen</span><span class="token punctuation">(</span>js_namespace <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;window&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;__TAURI__&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;core&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">invoke</span><span class="token punctuation">(</span>cmd<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> <span class="token class-name">JsValue</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JsValue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// They need to have different names!</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="传递参数" tabindex="-1"><a class="header-anchor" href="#传递参数"><span>传递参数</span></a></h5><p>command可以接收参数</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[tauri::command]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">my_custom_command</span><span class="token punctuation">(</span>invoke_message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I was invoked from JavaScript, with this message: {}&quot;</span><span class="token punctuation">,</span> invoke_message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数应该作为带有camelCase键的JSON对象传递：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;my_custom_command&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">invokeMessage</span><span class="token operator">:</span> <span class="token string">&#39;Hello!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以使用snake_case作为具有rename_all属性的参数：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[tauri::command(rename_all = <span class="token string">&quot;snake_case&quot;</span>)]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">my_custom_command</span><span class="token punctuation">(</span>invoke_message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;my_custom_command&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">invoke_message</span><span class="token operator">:</span> <span class="token string">&#39;Hello!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参数可以是任何类型，只要它们实现了<code>serde::Deserialize</code>。</p><p>相应的JavaScript：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;my_custom_command&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">invoke_message</span><span class="token operator">:</span> <span class="token string">&#39;Hello!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="返回数据" tabindex="-1"><a class="header-anchor" href="#返回数据"><span>返回数据</span></a></h5><p>command也可以返回数据：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[tauri::command]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">my_custom_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;Hello from Rust!&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>invoke函数返回一个promise，并使用返回值进行解析：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;my_custom_command&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>返回的数据可以是任何类型，只要它实现了<code>serde::Serialize</code>。</p><h6 id="返回array-buffers" tabindex="-1"><a class="header-anchor" href="#返回array-buffers"><span>返回Array Buffers</span></a></h6><p>当响应被发送到前端时，实现<code>serde::Serialize</code>的返回值被序列化为JSON。如果试图返回一个大数据（如文件或下载HTTP响应），这可能会降低应用程序的速度。要以优化的方式返回数组缓冲区，请使用<code>tauri::ipc::Response</code>：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">tauri<span class="token punctuation">::</span>ipc<span class="token punctuation">::</span></span><span class="token class-name">Response</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token attribute attr-name">#[tauri::command]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">read_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Response</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token namespace">tauri<span class="token punctuation">::</span>ipc<span class="token punctuation">::</span></span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h5><p>如果command可能会失败，并且需要能够返回一个错误，让函数返回一个Result：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[tauri::command]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> user <span class="token operator">==</span> <span class="token string">&quot;tauri&quot;</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">==</span> <span class="token string">&quot;tauri&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// resolve</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;logged_in&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// reject</span></span>
<span class="line">    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;invalid credentials&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果命令返回错误，promise将拒绝，否则，它将解析：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;tauri&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;0j4rijw8=&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所述，从command返回的所有内容都必须实现<code>serde::Serialize</code>，包括错误。如果你使用Rust的std库或外部crates中的错误类型，这可能会有问题，因为大多数错误类型都没有实现它。在简单的场景中，你可以使用<code>map_err</code>将这些错误转换为Strings：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[tauri::command]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">my_custom_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>err<span class="token closure-punctuation punctuation">|</span></span> err<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// Return \`null\` on success</span></span>
<span class="line">  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于这不是很习惯，您可能希望创建自己的错误类型，实现serde::Serialize。在下面的示例中，我们使用thiserrorcrate来帮助创建错误类型。它允许您通过派生thiserror::Error trait将枚举转换为错误类型。您可以查阅其文档以了解更多详细信息。</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token comment">// create the error type that represents all errors possible in our program</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug, thiserror::Error)]</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token attribute attr-name">#[error(transparent)]</span></span>
<span class="line">  <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token attribute attr-name">#[from]</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// we must manually implement serde::Serialize</span></span>
<span class="line"><span class="token keyword">impl</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Serialize</span> <span class="token keyword">for</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">fn</span> <span class="token function-definition function">serialize</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> serializer<span class="token punctuation">:</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token punctuation">::</span><span class="token class-name">Ok</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">::</span><span class="token class-name">Error</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token keyword">where</span></span>
<span class="line">    <span class="token class-name">S</span><span class="token punctuation">:</span> <span class="token namespace">serde<span class="token punctuation">::</span>ser<span class="token punctuation">::</span></span><span class="token class-name">Serializer</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    serializer<span class="token punctuation">.</span><span class="token function">serialize_str</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tauri::command]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">my_custom_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// This will return an error</span></span>
<span class="line">  <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;path/that/does/not/exist&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// Return \`null\` on success</span></span>
<span class="line">  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义错误类型的优点是使所有可能的错误都显式化，因此读者可以快速识别可能发生的错误。这为其他人（和你自己）在以后检查和重构代码时节省了大量的时间。 它还使您能够完全控制错误类型的序列化方式。在上面的例子中，我们只是将错误消息作为字符串返回，但是你可以为每个错误分配一个代码，这样你就可以更容易地将它映射到一个类似的TypeScript错误枚举，例如：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[derive(Debug, thiserror::Error)]</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token attribute attr-name">#[error(transparent)]</span></span>
<span class="line">  <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token attribute attr-name">#[from]</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token attribute attr-name">#[error(<span class="token string">&quot;failed to parse as string: {0}&quot;</span>)]</span></span>
<span class="line">  <span class="token class-name">Utf8</span><span class="token punctuation">(</span><span class="token attribute attr-name">#[from]</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token class-name">Utf8Error</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(serde::Serialize)]</span></span>
<span class="line"><span class="token attribute attr-name">#[serde(tag = <span class="token string">&quot;kind&quot;</span>, content = <span class="token string">&quot;message&quot;</span>)]</span></span>
<span class="line"><span class="token attribute attr-name">#[serde(rename_all = <span class="token string">&quot;camelCase&quot;</span>)]</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">ErrorKind</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token class-name">Utf8</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Serialize</span> <span class="token keyword">for</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">fn</span> <span class="token function-definition function">serialize</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> serializer<span class="token punctuation">:</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token punctuation">::</span><span class="token class-name">Ok</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">::</span><span class="token class-name">Error</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token keyword">where</span></span>
<span class="line">    <span class="token class-name">S</span><span class="token punctuation">:</span> <span class="token namespace">serde<span class="token punctuation">::</span>ser<span class="token punctuation">::</span></span><span class="token class-name">Serializer</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> error_message <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> error_kind <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">(</span>error_message<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Utf8</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">Utf8</span><span class="token punctuation">(</span>error_message<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    error_kind<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tauri::command]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/file&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Ok</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前端，现在得到一个{ kind: &#39;io&#39; | &#39;utf8&#39;, message: string }错误对象：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ErrorKind</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  kind<span class="token operator">:</span> <span class="token string">&#39;io&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;read&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">:</span> ErrorKind<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58)]))}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/Client/Tauri/CallingRust.html","title":"前端调用Rust代码","lang":"zh-CN","frontmatter":{"title":"前端调用Rust代码"},"headers":[{"level":3,"title":"Commands","slug":"commands","link":"#commands","children":[]}],"git":{"updatedTime":1731661583000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Client/Tauri/CallingRust.md"}');export{i as comp,u as data};
